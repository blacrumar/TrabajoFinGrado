{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blanc\\\\OneDrive - UNIVERSIDAD DE SEVILLA\\\\Escritorio\\\\4 ING SALUD\\\\Trabajo Fin de Grado\\\\intento\\\\client\\\\src\\\\components\\\\ListObservations.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListObservations = ({\n  paciente,\n  onClose\n}) => {\n  _s();\n  const [observations, setObservations] = useState([]);\n  const [filteredObservations, setFilteredObservations] = useState([]);\n  useEffect(() => {\n    const fetchObservations = async () => {\n      try {\n        const response = await fetch('/api/observations');\n        const data = await response.json();\n        setObservations(data);\n      } catch (error) {\n        console.error('Error fetching observations:', error);\n      }\n    };\n    fetchObservations();\n  }, []);\n  useEffect(() => {\n    if (observations.length > 0 && paciente) {\n      const filtered = observations.filter(obs => obs.subject === paciente._id);\n      setFilteredObservations(filtered);\n    }\n  }, [observations, paciente]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClose,\n      className: \"form_button\",\n      children: \"Cerrar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), filteredObservations.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1px\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Fecha\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Interpretaci\\xF3n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"C\\xF3digo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Valor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Estado\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Categor\\xEDa\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: filteredObservations.map(obs => {\n          var _obs$interpretation, _obs$code, _obs$category;\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: new Date(obs.effectiveDateTime).toLocaleDateString('es-ES')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: ((_obs$interpretation = obs.interpretation) === null || _obs$interpretation === void 0 ? void 0 : _obs$interpretation.text) || 'N/A'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: ((_obs$code = obs.code) === null || _obs$code === void 0 ? void 0 : _obs$code.text) || 'N/A'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: obs.valueString || 'N/A'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: obs.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: ((_obs$category = obs.category) === null || _obs$category === void 0 ? void 0 : _obs$category.text) || 'N/A'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 21\n            }, this)]\n          }, obs._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No hay observaciones para este paciente.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(ListObservations, \"+IdA43Gk4HYpehpxTtNC4qTsI9A=\");\n_c = ListObservations;\nexport default ListObservations;\n{/*\r\n    <div>\r\n      <h2>Observaciones del Paciente</h2>\r\n      \r\n      <button onClick={onClose}>Cerrar</button>\r\n      \r\n      {filteredObservations.length > 0 ? (\r\n        <ul>\r\n          {filteredObservations.map(obs => (\r\n            <li key={obs._id} className=\"patient-item\">\r\n             \r\n              <p>Fecha: <br />{new Date(obs.effectiveDateTime).toLocaleDateString('es-ES')}</p>\r\n              <p>Interpretación: <br />{obs.interpretation.text}</p>\r\n              <p>Código: <br />{obs.code.text}</p>\r\n              <p>Valor: <br />{obs.valueString}</p>\r\n              <p>Estado: <br />{obs.status}</p>\r\n              <p>Categoría: <br />{obs.category.text}</p>\r\n            </li>\r\n            \r\n          ))}\r\n          \r\n        </ul>\r\n       \r\n      ) : (\r\n        <p>No hay observaciones para este paciente.</p>\r\n      )}\r\n      </div>\r\n      \r\n \n    );\r\n  };\r\n \n export default ListObservations;\r\n    */}\n\n/*\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nexport const ListObservations = ({pacienteId}) => {\r\n\r\n    const [observations, setObservations] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchObservations = async () => {\r\n            try{\r\n                const response = await fetch(`/api/pacientes/${pacienteId}/observations`);\r\n                if(response.ok){\r\n                    const data = await response.json();\r\n                    setObservations(data);\r\n                } else {\r\n                    console.error('Error al cargar las observaciones:');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error al conectar con el servidor:', error);\r\n\r\n            }\r\n        };\r\n        fetchObservations();\r\n    }, [pacienteId]);\r\n*/\nvar _c;\n$RefreshReg$(_c, \"ListObservations\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ListObservations","paciente","onClose","_s","observations","setObservations","filteredObservations","setFilteredObservations","fetchObservations","response","fetch","data","json","error","console","length","filtered","filter","obs","subject","_id","children","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","border","map","_obs$interpretation","_obs$code","_obs$category","Date","effectiveDateTime","toLocaleDateString","interpretation","text","code","valueString","status","category","_c","$RefreshReg$"],"sources":["C:/Users/blanc/OneDrive - UNIVERSIDAD DE SEVILLA/Escritorio/4 ING SALUD/Trabajo Fin de Grado/intento/client/src/components/ListObservations.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nexport const ListObservations = ({ paciente, onClose }) => {\r\n\r\n  const [observations, setObservations] = useState([]);\r\n  const [filteredObservations, setFilteredObservations] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchObservations = async () => {\r\n      try {\r\n        const response = await fetch('/api/observations');\r\n        const data = await response.json();\r\n        setObservations(data);\r\n      } catch (error) {\r\n        console.error('Error fetching observations:', error);\r\n      }\r\n    };\r\n\r\n    fetchObservations();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (observations.length > 0 && paciente) {\r\n      const filtered = observations.filter(obs => obs.subject === paciente._id);\r\n      setFilteredObservations(filtered);\r\n    }\r\n  }, [observations, paciente]);\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={onClose} className=\"form_button\">Cerrar</button>\r\n\r\n      {\r\n        filteredObservations.length > 0 ? (\r\n\r\n\r\n          <table border=\"1px\">\r\n            <thead>\r\n              <tr>\r\n                <th>Fecha</th>\r\n                <th>Interpretación</th>\r\n                <th>Código</th>\r\n                <th>Valor</th>\r\n                <th>Estado</th>\r\n                <th>Categoría</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                filteredObservations.map(obs => (\r\n                  <tr key={obs._id}>\r\n                    <td>{new Date(obs.effectiveDateTime).toLocaleDateString('es-ES')}</td>\r\n                    <td>{obs.interpretation?.text || 'N/A'}</td>\r\n                    <td>{obs.code?.text || 'N/A'}</td>\r\n                    <td>{obs.valueString || 'N/A'}</td>\r\n                    <td>{obs.status}</td>\r\n                    <td>{obs.category?.text || 'N/A'}</td>\r\n                  </tr>\r\n                ))\r\n              }\r\n            </tbody>\r\n\r\n          </table>\r\n\r\n        ) : (\r\n          <p>No hay observaciones para este paciente.</p>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListObservations;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n{/*\r\n    <div>\r\n      <h2>Observaciones del Paciente</h2>\r\n      \r\n      <button onClick={onClose}>Cerrar</button>\r\n      \r\n      {filteredObservations.length > 0 ? (\r\n        <ul>\r\n          {filteredObservations.map(obs => (\r\n            <li key={obs._id} className=\"patient-item\">\r\n             \r\n              <p>Fecha: <br />{new Date(obs.effectiveDateTime).toLocaleDateString('es-ES')}</p>\r\n              <p>Interpretación: <br />{obs.interpretation.text}</p>\r\n              <p>Código: <br />{obs.code.text}</p>\r\n              <p>Valor: <br />{obs.valueString}</p>\r\n              <p>Estado: <br />{obs.status}</p>\r\n              <p>Categoría: <br />{obs.category.text}</p>\r\n            </li>\r\n            \r\n          ))}\r\n          \r\n        </ul>\r\n       \r\n      ) : (\r\n        <p>No hay observaciones para este paciente.</p>\r\n      )}\r\n      </div>\r\n      \r\n\r\n    );\r\n  };\r\n\r\nexport default ListObservations;\r\n    */}\r\n\r\n/*\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nexport const ListObservations = ({pacienteId}) => {\r\n\r\n    const [observations, setObservations] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchObservations = async () => {\r\n            try{\r\n                const response = await fetch(`/api/pacientes/${pacienteId}/observations`);\r\n                if(response.ok){\r\n                    const data = await response.json();\r\n                    setObservations(data);\r\n                } else {\r\n                    console.error('Error al cargar las observaciones:');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error al conectar con el servidor:', error);\r\n\r\n            }\r\n        };\r\n        fetchObservations();\r\n    }, [pacienteId]);\r\n*/\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}