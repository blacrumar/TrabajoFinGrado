{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blanc\\\\OneDrive - UNIVERSIDAD DE SEVILLA\\\\Escritorio\\\\4 ING SALUD\\\\Trabajo Fin de Grado\\\\intento\\\\client\\\\src\\\\components\\\\NewPatient.js\",\n  _s = $RefreshSig$();\n/*\r\nimport React, { useState } from 'react'\r\n\r\nexport const NewPatient = () => {\r\n\r\n\r\n    //El estado de los datos inicialmente esta vacío\r\n    const [patientState, setPatientState] = useState({ active: '', name: '', gender: '', birthDate: '' });\r\n\r\n    //Desestructuramos el estado para poder coger los valores por separado\r\n    const { active, name, gender, birthDate } = patientState;\r\n\r\n    const getDataPatientForm = e => {\r\n        //Para evitar el refresco de pantalla cuando le de a enviar, que es el comportamiento por defecto\r\n        e.preventDefault();\r\n        //Conseguir los datos del form\r\n        let target = e.target;\r\n        //Conseguir el nombre y el apellido\r\n        let active = target.active.value;\r\n        let name = target.name.value;\r\n        let gender = target.gender.value;\r\n        let birthDate = target.birthDate.value;\r\n        //Crear el objeto de nuevo paciente y que se guarden los datos\r\n        let patient = {\r\n            id: new Date().getTime(),\r\n            active,\r\n            name,\r\n            gender,\r\n            birthDate\r\n        };\r\n        //Asi tengo disponible dentro del estado el nuevo objeto patient creado\r\n        setPatientState(patient);\r\n\r\n        //Actualizar el estado del listado principal\r\n        {/*}\r\n        setListadoState(elementos => {\r\n            return[...elementos, patient];\r\n            //devolvemos todos los elementos que ya hubiera más el nuevo elemento creado\r\n        });\r\n        //Pasamos el metodo definido debajo para almacenr\r\n        saveInStorage(\"patients\", patient);\r\n    */\n/*\r\n }\r\n   }\r\n\n return (\r\n     <div>\r\n         <h3 className='title'>Añadir paciente</h3>\r\n         \r\n         {active && name && gender && birthDate}\r\n           <form className='form'>\r\n             <input type='text'\r\n                 className='form_input'\r\n                 id='active'\r\n                 name='active'\r\n                 placeholder='Activo' />\r\n<></>\r\n             <input type='text'\r\n                 className='form_input'\r\n                 id='name'\r\n                 name='name'\r\n                 placeholder='Nombre' />\r\n               <input type='text'\r\n                 className='form_input'\r\n                 id='gender'\r\n                 name='gender'\r\n                 placeholder='Género' />\r\n               <input type='text'\r\n                className='form_input'\r\n                id='birthDate'\r\n                name='birthDate'\r\n                placeholder='Fecha nacimiento' />\r\n               <input type='submit'\r\n                 className='form_buttom'\r\n                 id='addPatient'\r\n                 name='addPatient'\r\n                 placeholder='Añadir paciente' />\r\n         </form>\r\n     </div>\r\n )\r\n}\r\n*/\n\n/////////////////////////////////////////////////////////////////\n//CODIGO CHATGPT\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NewPatient = () => {\n  _s();\n  const [patientState, setPatientState] = useState({\n    active: '',\n    name: '',\n    gender: '',\n    birthDate: ''\n  });\n  const [message, setMessage] = useState('');\n  const getDataPatientForm = async e => {\n    e.preventDefault();\n    const target = e.target;\n    const newActive = target.active.value;\n    const newName = target.name.value;\n    const newGender = target.gender.value;\n    const newBirthDate = target.birthDate.value;\n\n    // Actualizar el estado de patientState con los nuevos datos del formulario\n    setPatientState(prevState => ({\n      ...prevState,\n      active: newActive,\n      name: newName,\n      gender: newGender,\n      birthDate: newBirthDate\n    }));\n\n    // Aquí podrías enviar los datos a la base de datos\n    try {\n      const response = await fetch('/api/pacientes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          active: newActive,\n          name: newName,\n          gender: newGender,\n          birthDate: newBirthDate\n        })\n      });\n      if (response.ok) {\n        console.log('Paciente guardado correctamente');\n        setPatientState({\n          active: '',\n          name: '',\n          gender: '',\n          birthDate: ''\n        });\n        // Aquí podrías mostrar un mensaje de éxito al usuario\n        setMessage('Paciente creado correctamente');\n      } else {\n        throw new Error('Error al guardar el paciente en la base de datos');\n      }\n    } catch (error) {\n      console.error(error.message);\n      // Aquí podrías mostrar un mensaje de error al usuario\n      setMessage('Error al crear el paciente');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"title\",\n      children: \"A\\xF1adir paciente\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mensaje\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: getDataPatientForm,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form_input\",\n        id: \"active\",\n        name: \"active\",\n        placeholder: \"Activo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form_input\",\n        id: \"name\",\n        name: \"name\",\n        placeholder: \"Nombre\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form_input\",\n        id: \"gender\",\n        name: \"gender\",\n        placeholder: \"G\\xE9nero\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form_input\",\n        id: \"birthDate\",\n        name: \"birthDate\",\n        placeholder: \"Fecha nacimiento\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        className: \"form_buttom\",\n        value: \"A\\xF1adir paciente\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 9\n  }, this);\n};\n_s(NewPatient, \"UOR8+3vCp1HxKk8I3nLxYjRCOzI=\");\n_c = NewPatient;\nvar _c;\n$RefreshReg$(_c, \"NewPatient\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","NewPatient","_s","patientState","setPatientState","active","name","gender","birthDate","message","setMessage","getDataPatientForm","e","preventDefault","target","newActive","value","newName","newGender","newBirthDate","prevState","response","fetch","method","headers","body","JSON","stringify","ok","console","log","Error","error","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","id","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/blanc/OneDrive - UNIVERSIDAD DE SEVILLA/Escritorio/4 ING SALUD/Trabajo Fin de Grado/intento/client/src/components/NewPatient.js"],"sourcesContent":["/*\r\nimport React, { useState } from 'react'\r\n\r\nexport const NewPatient = () => {\r\n\r\n\r\n    //El estado de los datos inicialmente esta vacío\r\n    const [patientState, setPatientState] = useState({ active: '', name: '', gender: '', birthDate: '' });\r\n\r\n    //Desestructuramos el estado para poder coger los valores por separado\r\n    const { active, name, gender, birthDate } = patientState;\r\n\r\n    const getDataPatientForm = e => {\r\n        //Para evitar el refresco de pantalla cuando le de a enviar, que es el comportamiento por defecto\r\n        e.preventDefault();\r\n        //Conseguir los datos del form\r\n        let target = e.target;\r\n        //Conseguir el nombre y el apellido\r\n        let active = target.active.value;\r\n        let name = target.name.value;\r\n        let gender = target.gender.value;\r\n        let birthDate = target.birthDate.value;\r\n        //Crear el objeto de nuevo paciente y que se guarden los datos\r\n        let patient = {\r\n            id: new Date().getTime(),\r\n            active,\r\n            name,\r\n            gender,\r\n            birthDate\r\n        };\r\n        //Asi tengo disponible dentro del estado el nuevo objeto patient creado\r\n        setPatientState(patient);\r\n\r\n        //Actualizar el estado del listado principal\r\n        {/*}\r\n        setListadoState(elementos => {\r\n            return[...elementos, patient];\r\n            //devolvemos todos los elementos que ya hubiera más el nuevo elemento creado\r\n        });\r\n        //Pasamos el metodo definido debajo para almacenr\r\n        saveInStorage(\"patients\", patient);\r\n    */\r\n   /*\r\n    }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3 className='title'>Añadir paciente</h3>\r\n            \r\n            {active && name && gender && birthDate}\r\n\r\n            <form className='form'>\r\n                <input type='text'\r\n                    className='form_input'\r\n                    id='active'\r\n                    name='active'\r\n                    placeholder='Activo' />\r\n<></>\r\n                <input type='text'\r\n                    className='form_input'\r\n                    id='name'\r\n                    name='name'\r\n                    placeholder='Nombre' />\r\n\r\n                <input type='text'\r\n                    className='form_input'\r\n                    id='gender'\r\n                    name='gender'\r\n                    placeholder='Género' />\r\n\r\n                <input type='text'\r\n                   className='form_input'\r\n                   id='birthDate'\r\n                   name='birthDate'\r\n                   placeholder='Fecha nacimiento' />\r\n\r\n                <input type='submit'\r\n                    className='form_buttom'\r\n                    id='addPatient'\r\n                    name='addPatient'\r\n                    placeholder='Añadir paciente' />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n*/\r\n\r\n\r\n/////////////////////////////////////////////////////////////////\r\n//CODIGO CHATGPT\r\nimport React, { useState } from 'react';\r\n\r\nexport const NewPatient = () => {\r\n    const [patientState, setPatientState] = useState({ active: '', name: '', gender: '', birthDate: '' });\r\n\r\n    const [message, setMessage] = useState('');\r\n\r\n    \r\n\r\n    const getDataPatientForm = async e => {\r\n        e.preventDefault();\r\n        const target = e.target;\r\n        const newActive = target.active.value;\r\n        const newName = target.name.value;\r\n        const newGender = target.gender.value;\r\n        const newBirthDate = target.birthDate.value;\r\n\r\n        \r\n        // Actualizar el estado de patientState con los nuevos datos del formulario\r\n        setPatientState(prevState => ({\r\n            ...prevState,\r\n            active: newActive,\r\n            name: newName,\r\n            gender: newGender,\r\n            birthDate: newBirthDate\r\n        }));\r\n\r\n        // Aquí podrías enviar los datos a la base de datos\r\n        try {\r\n            const response = await fetch('/api/pacientes', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    active: newActive,\r\n                    name: newName,\r\n                    gender: newGender,\r\n                    birthDate: newBirthDate\r\n                })\r\n            });\r\n            if (response.ok) {\r\n                console.log('Paciente guardado correctamente');\r\n                setPatientState({ active: '', name: '', gender: '', birthDate: '' });\r\n                // Aquí podrías mostrar un mensaje de éxito al usuario\r\n                setMessage('Paciente creado correctamente');\r\n            } else {\r\n                throw new Error('Error al guardar el paciente en la base de datos');\r\n            }\r\n        } catch (error) {\r\n            console.error(error.message);\r\n            // Aquí podrías mostrar un mensaje de error al usuario\r\n            setMessage('Error al crear el paciente');\r\n        }\r\n    \r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3 className='title'>Añadir paciente</h3>\r\n\r\n            {message && <p className='mensaje'>{message}</p>}\r\n\r\n            <form className='form' onSubmit={getDataPatientForm}>\r\n                <input type='text' className='form_input' id='active' name='active' placeholder='Activo' />\r\n                <input type='text' className='form_input' id='name' name='name' placeholder='Nombre' />\r\n                <input type='text' className='form_input' id='gender' name='gender' placeholder='Género' />\r\n                <input type='text' className='form_input' id='birthDate' name='birthDate' placeholder='Fecha nacimiento' />\r\n                <input type='submit' className='form_buttom' value='Añadir paciente' />\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}