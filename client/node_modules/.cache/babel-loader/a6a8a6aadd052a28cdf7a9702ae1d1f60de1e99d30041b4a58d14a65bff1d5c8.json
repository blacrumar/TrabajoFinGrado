{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blanc\\\\OneDrive - UNIVERSIDAD DE SEVILLA\\\\Escritorio\\\\4 ING SALUD\\\\Trabajo Fin de Grado\\\\intento\\\\client\\\\src\\\\components\\\\EditPaciente.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EditPaciente = ({\n  paciente,\n  onClose,\n  updatePacienteList\n}) => {\n  _s();\n  const officialName = paciente.name ? paciente.name.find(name => name.use === 'official') : null;\n  const usualName = paciente.name ? paciente.name.find(name => name.use === 'usual') : null;\n  const [formData, setFormData] = useState({\n    active: paciente.active,\n    officialName: officialName ? officialName.given.join(' ') + ' ' + (officialName.family || '') : '',\n    usualName: usualName ? usualName.given[0] : '',\n    gender: paciente.gender,\n    birthDate: paciente.birthDate ? paciente.birthDate.toISOString().split('T')[0] : '',\n    // Convertir a formato ISO,\n    phoneNumber: paciente.telecom ? paciente.telecom[2].value : ''\n\n    // Otros campos que puedas necesitar editar\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    const newValue = name === 'active' ? value === 'true' : name === 'birthDate' ? new Date(value) : value;\n    //convertir a booleano si se edita el campo active\n    //convertir a date si se edita rl campo birthDate\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: newValue instanceof Date && !isNaN(newValue) ? newValue.toISOString().split('T')[0] : value\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      //Construir el nombre en el formato deseado\n      const nameArray = [];\n      nameArray.push({\n        use: 'official',\n        family: formData.officialName.split(' ')[1],\n        //asignar el 2do elemento como apellidos\n        given: [formData.officialName.split(' ')[0]] //asignar el 1er elemento como nombre\n      });\n      nameArray.push({\n        use: 'usual',\n        given: [formData.usualName]\n      });\n      nameArray.push({\n        use: 'maiden',\n        family: '',\n        given: [''],\n        period: {\n          end: ''\n        }\n      });\n\n      // Construir el array telecom con el formato deseado\n      const telecomArray = [{\n        use: ''\n      },\n      // Primer objeto vacío\n      {\n        system: 'phone',\n        value: '',\n        use: 'work',\n        rank: 1\n      },\n      // Segundo objeto vacío\n      {\n        system: 'phone',\n        value: formData.phoneNumber,\n        use: 'mobile',\n        rank: 2\n      }, {\n        system: 'phone',\n        value: '',\n        use: 'old',\n        period: {\n          end: ''\n        }\n      }];\n\n      //enviamos los datos al servidor para que almacene lo nuevo en la BD\n      const res = await fetch(`/api/pacientes/${paciente._id}`, {\n        method: \"PUT\",\n        body: JSON.stringify({\n          active: formData.active,\n          name: nameArray,\n          gender: formData.gender,\n          birthDate: formData.birthDate,\n          telecom: telecomArray\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await res.json();\n      console.log(data); // Aquí puedes manejar la respuesta del servidor, como mostrar un mensaje de éxito\n      await updatePacienteList(); //actualizamos la lista de pacientes despues de realizar los cambios\n      onClose(); // Cierra el formulario después de guardar los cambios\n    } catch (error) {\n      console.error('Error al guardar cambios:', error);\n      // Aquí puedes manejar errores, como mostrar un mensaje de error al usuario\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"edit-paciente\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Editar paciente \", `${officialName ? officialName.given.join(' ') + ' ' + (officialName.family || '') : ''}`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Estado:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"active\",\n          value: formData.active,\n          onChange: handleChange,\n          className: \"form_input\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: true,\n            children: \"Activo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: false,\n            children: \"Inactivo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Nombre oficial:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"officialName\",\n          value: formData.officialName,\n          onChange: handleChange,\n          className: \"form_input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Nombre usual:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"usualName\",\n          value: formData.usualName,\n          onChange: handleChange,\n          className: \"form_input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"G\\xE9nero:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"gender\",\n          value: formData.gender,\n          onChange: handleChange,\n          className: \"form_input\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"femenino\",\n            children: \"Femenino\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"masculino\",\n            children: \"Masculino\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"indefinido\",\n            children: \"Indefinido\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"otro\",\n            children: \"Otro\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Fecha de nacimiento:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          name: \"birthDate\",\n          value: formData.birthDate,\n          onChange: handleChange,\n          className: \"form_input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"N\\xFAmero de tel\\xE9fono:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"phoneNumber\",\n          value: formData.phoneNumber,\n          onChange: handleChange,\n          className: \"form_input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"form_button\",\n          children: \"Guardar Cambios\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"form_button\",\n          onClick: onClose,\n          children: \"Cancelar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n};\n\n/*\r\nimport React, { useState } from 'react';\r\n\r\nexport const EditPaciente = ({ paciente, onClose }) => {\r\n    <h1>EDITAR PACIENTE</h1>\r\n\r\n    const [formData, setFormData] = useState({\r\n        active: paciente.active,\r\n        name: paciente.name,\r\n        gender: paciente.gender,\r\n        birthDate: paciente.birthDate,\r\n        // Otros campos que puedas necesitar editar\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData(prevData => ({\r\n            ...prevData,\r\n            [name]: value\r\n        }));\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // Aquí podrías enviar los datos del formulario al servidor para guardar los cambios\r\n        // Por simplicidad, aquí solo cerramos el componente\r\n        onClose();\r\n    };\r\n    return (\r\n        <div className=\"edit-paciente\">\r\n            <h2>Editar Paciente</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    Activo:\r\n                    <input type=\"text\" name=\"active\" value={formData.active} onChange={handleChange} />\r\n                </label>\r\n                <label>\r\n                    Nombre:\r\n                    <input type=\"text\" name=\"name\" value={formData.name} onChange={handleChange} />\r\n                </label>\r\n                <label>\r\n                    Género:\r\n                    <input type=\"text\" name=\"gender\" value={formData.gender} onChange={handleChange} />\r\n\r\n\r\n                </label>\r\n                <label>\r\n                    Fecha de nacimiento:\r\n                    <input type=\"text\" name=\"birthDate\" value={formData.birthDate} onChange={handleChange} />\r\n                </label>\r\n                {/* Otros campos del formulario }\r\n                <div className=\"buttons\">\r\n                    <button type=\"submit\">Guardar Cambios</button>\r\n                    <button type=\"button\" onClick={onClose}>Cancelar</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n*/\n\n/*\r\nconst [showEditForm, setShowEditForm] = useState(false);\r\n \r\nconst updatePaciente = async (pacienteId) => {\r\n\r\ntry {\r\n  const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n    method: \"PUT\",\r\n    body: JSON.stringify(editedPaciente),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n\r\n  });\r\n\r\n  const json = await res.json();\r\n  if (json.acknowledged) {\r\n    setPacientes(currentPacientes => {\r\n      return currentPacientes.map((currentPaciente) => {\r\n        if (currentPaciente._id === pacienteId) {\r\n          return { ...currentPaciente, ...editedPaciente };\r\n        }\r\n        return currentPaciente;\r\n      });\r\n\r\n    });\r\n    setShowEditForm(false);\r\n  }\r\n} catch (error) {\r\n  console.log(\"Error al actualizar el paciente:\", error);\r\n}\r\n};\r\n\r\nconst handleInputChange = (e) => {\r\nconst { name, value } = e.target;\r\nsetEditedPaciente({ ...editedPaciente, [name]: value });\r\n};\r\n\r\n{\r\n    showEditForm ? (\r\n        <div>\r\n            <input type=\"text\" name=\"active\" value={editedPaciente.active} onChange={handleInputChange} />\r\n            <input type=\"text\" name=\"name\" value={editedPaciente.name} onChange={handleInputChange} />\r\n            <input type=\"text\" name=\"gender\" value={editedPaciente.gender} onChange={handleInputChange} />\r\n            <input type=\"text\" name=\"birthDate\" value={editedPaciente.birthDate} onChange={handleInputChange} />\r\n            <button onClick={() => updatePaciente(p._id)}>Guardar</button>\r\n        </div>\r\n    ) : (\r\n        <div>\r\n            <button className=\"edit\" onClick={() => {\r\n                setShowEditForm(true);\r\n                setEditedPaciente(p); // Inicializa el formulario con los datos del paciente\r\n            }}>Editar</button>\r\n            <button className=\"delete\" onClick={() => deletePaciente(p._id)}>Borrar</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n};*/\n_s(EditPaciente, \"c2zqeK/zDqyb6f+DQxeryJRT0iw=\");\n_c = EditPaciente;\nvar _c;\n$RefreshReg$(_c, \"EditPaciente\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","EditPaciente","paciente","onClose","updatePacienteList","_s","officialName","name","find","use","usualName","formData","setFormData","active","given","join","family","gender","birthDate","toISOString","split","phoneNumber","telecom","value","handleChange","e","target","newValue","Date","prevData","isNaN","handleSubmit","preventDefault","nameArray","push","period","end","telecomArray","system","rank","res","fetch","_id","method","body","JSON","stringify","headers","data","json","console","log","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","type","onClick","_c","$RefreshReg$"],"sources":["C:/Users/blanc/OneDrive - UNIVERSIDAD DE SEVILLA/Escritorio/4 ING SALUD/Trabajo Fin de Grado/intento/client/src/components/EditPaciente.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport const EditPaciente = ({ paciente, onClose, updatePacienteList }) => {\r\n\r\n    \r\n    const officialName = paciente.name ? paciente.name.find(name => name.use === 'official') : null;\r\n    const usualName = paciente.name ? paciente.name.find(name => name.use === 'usual') : null;\r\n\r\n    const [formData, setFormData] = useState({\r\n        active: paciente.active,\r\n        officialName: officialName ? officialName.given.join(' ') + ' ' + (officialName.family || '') : '',\r\n        usualName: usualName ? usualName.given[0] : '',\r\n        gender: paciente.gender,\r\n        birthDate: paciente.birthDate ? paciente.birthDate.toISOString().split('T')[0] : '', // Convertir a formato ISO,\r\n        phoneNumber: paciente.telecom ? paciente.telecom[2].value : '' \r\n        \r\n        // Otros campos que puedas necesitar editar\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        const newValue = name === 'active' ? value === 'true' : name === 'birthDate' ? new Date(value) : value;\r\n        //convertir a booleano si se edita el campo active\r\n        //convertir a date si se edita rl campo birthDate\r\n        setFormData(prevData => ({\r\n            ...prevData,\r\n            [name]: newValue instanceof Date && !isNaN(newValue) ? newValue.toISOString().split('T')[0] : value\r\n        }));\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            //Construir el nombre en el formato deseado\r\n            const nameArray = [];\r\n            nameArray.push({\r\n                use: 'official',\r\n                family: formData.officialName.split(' ')[1], //asignar el 2do elemento como apellidos\r\n                given: [formData.officialName.split(' ')[0]] //asignar el 1er elemento como nombre\r\n            });\r\n\r\n            nameArray.push({\r\n                use: 'usual',\r\n                given: [formData.usualName]\r\n            });\r\n\r\n            nameArray.push({\r\n                use: 'maiden',\r\n                family: '',\r\n                given: [''],\r\n                period: {\r\n                    end: ''\r\n                }\r\n            });\r\n\r\n\r\n            // Construir el array telecom con el formato deseado\r\n            const telecomArray = [\r\n                {\r\n                    use: ''\r\n                }, // Primer objeto vacío\r\n                {\r\n                    system: 'phone',\r\n                    value: '',\r\n                    use: 'work',\r\n                    rank: 1\r\n                }, // Segundo objeto vacío\r\n                {\r\n                    system: 'phone',\r\n                    value: formData.phoneNumber,\r\n                    use: 'mobile',\r\n                    rank: 2\r\n                },\r\n                {\r\n                    system: 'phone',\r\n                    value: '',\r\n                    use: 'old',\r\n                    period: {\r\n                        end: ''\r\n                    }\r\n                }\r\n            ];\r\n\r\n\r\n\r\n\r\n            //enviamos los datos al servidor para que almacene lo nuevo en la BD\r\n            const res = await fetch(`/api/pacientes/${paciente._id}`, {\r\n                method: \"PUT\",\r\n                body: JSON.stringify({\r\n                    active: formData.active,\r\n                    name: nameArray,\r\n                    gender: formData.gender,\r\n                    birthDate: formData.birthDate,\r\n                    telecom: telecomArray\r\n                }),\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n            });\r\n            const data = await res.json();\r\n            console.log(data); // Aquí puedes manejar la respuesta del servidor, como mostrar un mensaje de éxito\r\n            await updatePacienteList(); //actualizamos la lista de pacientes despues de realizar los cambios\r\n            onClose(); // Cierra el formulario después de guardar los cambios\r\n        } catch (error) {\r\n            console.error('Error al guardar cambios:', error);\r\n            // Aquí puedes manejar errores, como mostrar un mensaje de error al usuario\r\n        }\r\n    };\r\n\r\n   \r\n\r\n     \r\n    return (\r\n        <div className=\"edit-paciente\">\r\n            <h2>Editar paciente {`${officialName ? officialName.given.join(' ') + ' ' + (officialName.family || '') : ''}`}</h2>\r\n            <form onSubmit={handleSubmit} className='form'>\r\n                <label>\r\n                    Estado:\r\n                    <select name=\"active\" value={formData.active} onChange={handleChange} className=\"form_input\">\r\n\r\n                        <option value={true}>Activo</option>\r\n                        <option value={false}>Inactivo</option>\r\n                    </select>\r\n                </label>\r\n                \r\n                <label>\r\n                    Nombre oficial:\r\n                    <input name=\"officialName\" value={formData.officialName} onChange={handleChange} className=\"form_input\"/>\r\n                </label>\r\n                \r\n                <label>\r\n                    Nombre usual:\r\n                    <input name=\"usualName\" value={formData.usualName} onChange={handleChange} className=\"form_input\" />\r\n                </label>\r\n                \r\n                <label>\r\n                    Género:\r\n                    <select name=\"gender\" value={formData.gender} onChange={handleChange} className=\"form_input\">\r\n\r\n                        <option value=\"femenino\">Femenino</option>\r\n                        <option value=\"masculino\">Masculino</option>\r\n                        <option value=\"indefinido\">Indefinido</option>\r\n                        <option value=\"otro\">Otro</option>\r\n                    </select>\r\n                </label>\r\n                \r\n                <label>\r\n                    Fecha de nacimiento:\r\n                    <input type=\"date\" name=\"birthDate\" value={formData.birthDate} onChange={handleChange} className=\"form_input\"/>\r\n                </label>\r\n                \r\n                <label>\r\n                    Número de teléfono:\r\n                    <input type=\"text\" name=\"phoneNumber\" value={formData.phoneNumber} onChange={handleChange} className=\"form_input\"/>\r\n                </label>\r\n                \r\n                {/* Otros campos del formulario */}\r\n                <div className=\"buttons\">\r\n                    <button type=\"submit\" className='form_button'>Guardar Cambios</button>\r\n                    <button type=\"button\" className='form_button' onClick={onClose}>Cancelar</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n/*\r\nimport React, { useState } from 'react';\r\n\r\nexport const EditPaciente = ({ paciente, onClose }) => {\r\n    <h1>EDITAR PACIENTE</h1>\r\n\r\n    const [formData, setFormData] = useState({\r\n        active: paciente.active,\r\n        name: paciente.name,\r\n        gender: paciente.gender,\r\n        birthDate: paciente.birthDate,\r\n        // Otros campos que puedas necesitar editar\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData(prevData => ({\r\n            ...prevData,\r\n            [name]: value\r\n        }));\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // Aquí podrías enviar los datos del formulario al servidor para guardar los cambios\r\n        // Por simplicidad, aquí solo cerramos el componente\r\n        onClose();\r\n    };\r\n    return (\r\n        <div className=\"edit-paciente\">\r\n            <h2>Editar Paciente</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    Activo:\r\n                    <input type=\"text\" name=\"active\" value={formData.active} onChange={handleChange} />\r\n                </label>\r\n                <label>\r\n                    Nombre:\r\n                    <input type=\"text\" name=\"name\" value={formData.name} onChange={handleChange} />\r\n                </label>\r\n                <label>\r\n                    Género:\r\n                    <input type=\"text\" name=\"gender\" value={formData.gender} onChange={handleChange} />\r\n\r\n\r\n                </label>\r\n                <label>\r\n                    Fecha de nacimiento:\r\n                    <input type=\"text\" name=\"birthDate\" value={formData.birthDate} onChange={handleChange} />\r\n                </label>\r\n                {/* Otros campos del formulario }\r\n                <div className=\"buttons\">\r\n                    <button type=\"submit\">Guardar Cambios</button>\r\n                    <button type=\"button\" onClick={onClose}>Cancelar</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n*/\r\n\r\n/*\r\nconst [showEditForm, setShowEditForm] = useState(false);\r\n \r\nconst updatePaciente = async (pacienteId) => {\r\n\r\ntry {\r\n  const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n    method: \"PUT\",\r\n    body: JSON.stringify(editedPaciente),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n\r\n  });\r\n\r\n  const json = await res.json();\r\n  if (json.acknowledged) {\r\n    setPacientes(currentPacientes => {\r\n      return currentPacientes.map((currentPaciente) => {\r\n        if (currentPaciente._id === pacienteId) {\r\n          return { ...currentPaciente, ...editedPaciente };\r\n        }\r\n        return currentPaciente;\r\n      });\r\n\r\n    });\r\n    setShowEditForm(false);\r\n  }\r\n} catch (error) {\r\n  console.log(\"Error al actualizar el paciente:\", error);\r\n}\r\n};\r\n\r\nconst handleInputChange = (e) => {\r\nconst { name, value } = e.target;\r\nsetEditedPaciente({ ...editedPaciente, [name]: value });\r\n};\r\n\r\n{\r\n    showEditForm ? (\r\n        <div>\r\n            <input type=\"text\" name=\"active\" value={editedPaciente.active} onChange={handleInputChange} />\r\n            <input type=\"text\" name=\"name\" value={editedPaciente.name} onChange={handleInputChange} />\r\n            <input type=\"text\" name=\"gender\" value={editedPaciente.gender} onChange={handleInputChange} />\r\n            <input type=\"text\" name=\"birthDate\" value={editedPaciente.birthDate} onChange={handleInputChange} />\r\n            <button onClick={() => updatePaciente(p._id)}>Guardar</button>\r\n        </div>\r\n    ) : (\r\n        <div>\r\n            <button className=\"edit\" onClick={() => {\r\n                setShowEditForm(true);\r\n                setEditedPaciente(p); // Inicializa el formulario con los datos del paciente\r\n            }}>Editar</button>\r\n            <button className=\"delete\" onClick={() => deletePaciente(p._id)}>Borrar</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n};*/"],"mappings":"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,OAAQ,CAAC,eACtE1D,OAAA;UAAQ6D,IAAI,EAAC,QAAQ;UAACR,SAAS,EAAC,aAAa;UAACS,OAAO,EAAE3D,OAAQ;UAAAmD,QAAA,EAAC;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEd,CAAC;;AAKD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1DArD,EAAA,CArOaJ,YAAY;AAAA8D,EAAA,GAAZ9D,YAAY;AAAA,IAAA8D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}