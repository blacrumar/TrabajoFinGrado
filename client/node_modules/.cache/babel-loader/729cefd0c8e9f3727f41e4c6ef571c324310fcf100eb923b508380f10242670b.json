{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blanc\\\\OneDrive - UNIVERSIDAD DE SEVILLA\\\\Escritorio\\\\4 ING SALUD\\\\Trabajo Fin de Grado\\\\intento\\\\client\\\\src\\\\components\\\\ListObservations.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListObservations = ({\n  paciente,\n  onClose\n}) => {\n  _s();\n  const [observations, setObservations] = useState([]);\n  const [filteredObservations, setFilteredObservations] = useState([]);\n  useEffect(() => {\n    const fetchObservations = async () => {\n      try {\n        const response = await fetch('/api/observations');\n        const data = await response.json();\n        setObservations(data);\n      } catch (error) {\n        console.error('Error fetching observations:', error);\n      }\n    };\n    fetchObservations();\n  }, []);\n  useEffect(() => {\n    if (observations.length > 0 && paciente) {\n      const filtered = observations.filter(obs => obs.subject === paciente._id);\n      setFilteredObservations(filtered);\n    }\n  }, [observations, paciente]);\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    border: \"1px\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Fecha\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Interpretaci\\xF3n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"C\\xF3digo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Valor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Estado\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Categor\\xEDa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: new Date(obs.effectiveDateTime).toLocaleDateString('es-ES')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: obs.interpretation.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: obs.code.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: obs.valueString\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: obs.status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: obs.category.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(ListObservations, \"+IdA43Gk4HYpehpxTtNC4qTsI9A=\");\n_c = ListObservations;\nexport default ListObservations;\n{/*\r\n <div>\r\n  <h2>Observaciones del Paciente</h2>\r\n  \r\n  <button onClick={onClose}>Cerrar</button>\r\n  \r\n  {filteredObservations.length > 0 ? (\r\n    <ul>\r\n      {filteredObservations.map(obs => (\r\n        <li key={obs._id} className=\"patient-item\">\r\n         \r\n          <p>Fecha: <br />{new Date(obs.effectiveDateTime).toLocaleDateString('es-ES')}</p>\r\n          <p>Interpretación: <br />{obs.interpretation.text}</p>\r\n          <p>Código: <br />{obs.code.text}</p>\r\n          <p>Valor: <br />{obs.valueString}</p>\r\n          <p>Estado: <br />{obs.status}</p>\r\n          <p>Categoría: <br />{obs.category.text}</p>\r\n        </li>\r\n        \r\n      ))}\r\n      \r\n    </ul>\r\n   \r\n  ) : (\r\n    <p>No hay observaciones para este paciente.</p>\r\n  )}\r\n  </div>\r\n  \r\n  );\r\n };\r\n export default ListObservations;\r\n */}\n\n/*\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nexport const ListObservations = ({pacienteId}) => {\r\n\r\n    const [observations, setObservations] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchObservations = async () => {\r\n            try{\r\n                const response = await fetch(`/api/pacientes/${pacienteId}/observations`);\r\n                if(response.ok){\r\n                    const data = await response.json();\r\n                    setObservations(data);\r\n                } else {\r\n                    console.error('Error al cargar las observaciones:');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error al conectar con el servidor:', error);\r\n\r\n            }\r\n        };\r\n        fetchObservations();\r\n    }, [pacienteId]);\r\n*/\nvar _c;\n$RefreshReg$(_c, \"ListObservations\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ListObservations","paciente","onClose","_s","observations","setObservations","filteredObservations","setFilteredObservations","fetchObservations","response","fetch","data","json","error","console","length","filtered","filter","obs","subject","_id","border","children","fileName","_jsxFileName","lineNumber","columnNumber","Date","effectiveDateTime","toLocaleDateString","interpretation","text","code","valueString","status","category","_c","$RefreshReg$"],"sources":["C:/Users/blanc/OneDrive - UNIVERSIDAD DE SEVILLA/Escritorio/4 ING SALUD/Trabajo Fin de Grado/intento/client/src/components/ListObservations.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nexport const ListObservations = ({ paciente, onClose }) => {\r\n\r\n    const [observations, setObservations] = useState([]);\r\n  const [filteredObservations, setFilteredObservations] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchObservations = async () => {\r\n      try {\r\n        const response = await fetch('/api/observations');\r\n        const data = await response.json();\r\n        setObservations(data);\r\n      } catch (error) {\r\n        console.error('Error fetching observations:', error);\r\n      }\r\n    };\r\n\r\n    fetchObservations();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (observations.length > 0 && paciente) {\r\n      const filtered = observations.filter(obs => obs.subject === paciente._id);\r\n      setFilteredObservations(filtered);\r\n    }\r\n  }, [observations, paciente]);\r\n\r\n  return (\r\n\r\n    <table border=\"1px\">\r\n      <thead>\r\n        <tr>\r\n          <th>Fecha</th>\r\n          <th>Interpretación</th>\r\n          <th>Código</th>\r\n          <th>Valor</th>\r\n          <th>Estado</th>\r\n          <th>Categoría</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>{new Date(obs.effectiveDateTime).toLocaleDateString('es-ES')}</td>\r\n          <td>{obs.interpretation.text}</td>\r\n          <td>{obs.code.text}</td>\r\n          <td>{obs.valueString}</td>\r\n          <td>{obs.status}</td>\r\n          <td>{obs.category.text}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n\r\n  );\r\n  };\r\n\r\n  export default ListObservations;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    {/*\r\n    <div>\r\n      <h2>Observaciones del Paciente</h2>\r\n      \r\n      <button onClick={onClose}>Cerrar</button>\r\n      \r\n      {filteredObservations.length > 0 ? (\r\n        <ul>\r\n          {filteredObservations.map(obs => (\r\n            <li key={obs._id} className=\"patient-item\">\r\n             \r\n              <p>Fecha: <br />{new Date(obs.effectiveDateTime).toLocaleDateString('es-ES')}</p>\r\n              <p>Interpretación: <br />{obs.interpretation.text}</p>\r\n              <p>Código: <br />{obs.code.text}</p>\r\n              <p>Valor: <br />{obs.valueString}</p>\r\n              <p>Estado: <br />{obs.status}</p>\r\n              <p>Categoría: <br />{obs.category.text}</p>\r\n            </li>\r\n            \r\n          ))}\r\n          \r\n        </ul>\r\n       \r\n      ) : (\r\n        <p>No hay observaciones para este paciente.</p>\r\n      )}\r\n      </div>\r\n      \r\n\r\n    );\r\n  };\r\n\r\nexport default ListObservations;\r\n    */}\r\n\r\n/*\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nexport const ListObservations = ({pacienteId}) => {\r\n\r\n    const [observations, setObservations] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchObservations = async () => {\r\n            try{\r\n                const response = await fetch(`/api/pacientes/${pacienteId}/observations`);\r\n                if(response.ok){\r\n                    const data = await response.json();\r\n                    setObservations(data);\r\n                } else {\r\n                    console.error('Error al cargar las observaciones:');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error al conectar con el servidor:', error);\r\n\r\n            }\r\n        };\r\n        fetchObservations();\r\n    }, [pacienteId]);\r\n*/\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}