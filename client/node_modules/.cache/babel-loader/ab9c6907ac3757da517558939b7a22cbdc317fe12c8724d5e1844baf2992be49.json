{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blanc\\\\OneDrive - UNIVERSIDAD DE SEVILLA\\\\Escritorio\\\\4 ING SALUD\\\\Trabajo Fin de Grado\\\\intento\\\\client\\\\src\\\\components\\\\ListPatients.js\",\n  _s = $RefreshSig$();\n///////////////////////////////////////////////////////////////\n//CODIGO SIN FILTRADO NI BUSCADOR\n\nimport React, { useEffect, useState } from 'react';\nimport { EditPaciente } from '../components/EditPaciente';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListPatients = () => {\n  _s();\n  // const { pacientes, setPacientes } = props;\n\n  const [pacientes, setPacientes] = useState([]);\n  //const [showEditForm, setShowEditForm] = useState(false);\n  const [editedPaciente, setEditedPaciente] = useState(null);\n  useEffect(() => {\n    async function getPacientes() {\n      const res = await fetch(\"/api/pacientes\");\n      const pacientes = await res.json();\n      setPacientes(pacientes);\n    }\n    getPacientes();\n  }, []);\n  const deletePaciente = async pacienteId => {\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\n      method: \"DELETE\"\n    });\n    const json = await res.json();\n    if (json.acknowledged) {\n      setPacientes(currentPacientes => {\n        return currentPacientes.filter(currentPaciente => currentPaciente._id !== pacienteId);\n      });\n    }\n  };\n  const handleEditClick = paciente => {\n    setEditedPaciente(paciente);\n  };\n  const handleCloseEdit = () => {\n    setEditedPaciente(null); // Restablecer editedPaciente a null para ocultar el componente EditPaciente\n  };\n  const updatePacienteList = async () => {\n    try {\n      const res = await fetch(\"/api/pacientes\");\n      const pacientes = await res.json();\n      setPacientes(pacientes);\n    } catch (error) {\n      console.error('Error al actualizar la lista de pacientes:', error);\n    }\n  };\n  return editedPaciente ? /*#__PURE__*/_jsxDEV(EditPaciente, {\n    paciente: editedPaciente,\n    onClose: handleCloseEdit,\n    updatePacienteList: updatePacienteList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: pacientes && pacientes.length > 0 ? pacientes.map(p => /*#__PURE__*/_jsxDEV(\"article\", {\n      className: \"patient-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"active\",\n        children: [\"Estado activo:\", p.active]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"name\",\n        children: [\"Nombre:\", p.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"gender\",\n        children: [\"G\\xE9nero:\", p.gender]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"birthDate\",\n        children: [\"Fecha de nacimiento:\", p.birthDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"edit\",\n          onClick: () => handleEditClick(p),\n          children: \"Editar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"delete\",\n          onClick: () => deletePaciente(p._id),\n          children: \"Borrar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, p._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"No hay pacientes para mostrar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 11\n  }, this);\n};\n_s(ListPatients, \"jkcc8rwt+86O2n9hhUuS0gmwvGM=\");\n_c = ListPatients;\nexport default ListPatients;\n\n// CODIGO BUSCADOR SOLO\n/*\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { EditPaciente } from '../components/EditPaciente';\r\n\r\n\r\nexport const ListPatients = () => {\r\n  // const { pacientes, setPacientes } = props;\r\n\r\n  const [pacientes, setPacientes] = useState([]);\r\n  //const [showEditForm, setShowEditForm] = useState(false);\r\n  const [editedPaciente, setEditedPaciente] = useState(null);\r\n\r\n\r\n  //Para el buscador\r\n  const [filteredPacientes, setFilteredPacientes] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    async function getPacientes() {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n      setFilteredPacientes(pacientes); //pasamos todos los pacientes que hay\r\n    }\r\n    getPacientes();\r\n  }, []);\r\n\r\n  //filtrado para el buscador\r\n \r\n  const handleSearch = (e) => {\r\n    const value = e.target.value;\r\n    setSearchTerm(value);\r\n    const filteredResults = pacientes.filter(paciente =>\r\n      paciente.name.toLowerCase().includes(value.toLowerCase())\r\n\r\n    );\r\n    setFilteredPacientes(filteredResults);\r\n  };\r\n  \r\n \r\n\r\n\r\n\r\n  const deletePaciente = async (pacienteId) => {\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n      method: \"DELETE\"\r\n    });\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n      setPacientes(currentPacientes => {\r\n        return currentPacientes.filter((currentPaciente) => currentPaciente._id !== pacienteId);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (paciente) => {\r\n    setEditedPaciente(paciente);\r\n  };\r\n\r\n  const handleCloseEdit = () => {\r\n    setEditedPaciente(null); // Restablecer editedPaciente a null para ocultar el componente EditPaciente\r\n  };\r\n\r\n  const updatePacienteList = async () => {\r\n    try {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n    } catch (error) {\r\n      console.error('Error al actualizar la lista de pacientes:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n       <div className='barra-buscador'>\r\n      <input className='buscador'\r\n        type=\"text\"\r\n        placeholder=\"Buscar por nombre\"\r\n        value={searchTerm}\r\n        onChange={handleSearch}\r\n      />\r\n      <img className=\"buscar\" src='/buscar.avif' />\r\n      </div>\r\n     \r\n  \r\n  \r\n      {filteredPacientes.map(paciente => (\r\n        <article key={paciente._id} className=\"patient-item\">\r\n          <p className=\"active\">Estado activo:{paciente.active}</p>\r\n          <p className=\"name\">Nombre:{paciente.name}</p>\r\n          <p className=\"gender\">Género:{paciente.gender}</p>\r\n          <p className=\"birthDate\">Fecha de nacimiento:{paciente.birthDate}</p>\r\n          <div>\r\n            <button className=\"edit\" onClick={() => handleEditClick(paciente)}>Editar</button>\r\n            <button className=\"delete\" onClick={() => deletePaciente(paciente._id)}>Borrar</button>\r\n          </div>\r\n        </article>\r\n      ))}\r\n\r\n      {editedPaciente && (\r\n        <EditPaciente paciente={editedPaciente} onClose={handleCloseEdit} updatePacienteList={updatePacienteList} />\r\n      )}\r\n      \r\n    </div>\r\n  );\r\n};\r\nexport default ListPatients;\r\n*/\n\n/*\r\n/// CODIGO CON BUSCADOR Y FILTRADO\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { EditPaciente } from '../components/EditPaciente';\r\n\r\n\r\nexport const ListPatients = () => {\r\n  // const { pacientes, setPacientes } = props;\r\n\r\n  const [pacientes, setPacientes] = useState([]);\r\n  //const [showEditForm, setShowEditForm] = useState(false);\r\n  const [editedPaciente, setEditedPaciente] = useState(null);\r\n\r\n\r\n  //Para el buscador\r\n  const [filteredPacientes, setFilteredPacientes] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  //Para el filtrado\r\n  const [filterByActive, setFilterByActive] = useState('all'); // Opción predeterminada: mostrar todos los pacientes\r\n  const [filterByGender, setFilterByGender] = useState('all'); // Opción predeterminada: mostrar todos los pacientes\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n    async function getPacientes() {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n      //setFilteredPacientes(pacientes); //pasamos todos los pacientes que hay\r\n    }\r\n    getPacientes();\r\n  }, []);\r\n\r\n\r\n \r\n  //filtrado + buscador (tambien se tiene que filtrar)\r\n  const handleSearch = (e) => {\r\n    const value = e.target.value;\r\n    setSearchTerm(value);\r\n    filterPacientes(value, filterByActive, filterByGender);\r\n  };\r\n\r\n  const handleFilterByActiveChange = (e) => {\r\n    const value = e.target.value;\r\n    setFilterByActive(value);\r\n    filterPacientes(searchTerm, value, filterByGender);\r\n  };\r\n\r\n  const handleFilterByGenderChange = (e) => {\r\n    const value = e.target.value;\r\n    setFilterByGender(value);\r\n    filterPacientes(searchTerm, filterByActive, value);\r\n  };\r\n\r\n  const filterPacientes = (searchTerm, activeOption, genderOption) => {\r\n    let filteredResults = pacientes.filter(paciente =>\r\n      (paciente.name.toLowerCase().includes(searchTerm.toLowerCase()) || searchTerm === '') &&\r\n      (activeOption === 'all' || paciente.active === activeOption) &&\r\n      (genderOption === 'all' || paciente.gender === genderOption)\r\n    );\r\n    setFilteredPacientes(filteredResults);\r\n  };\r\n\r\n\r\n\r\n  const deletePaciente = async (pacienteId) => {\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n      method: \"DELETE\"\r\n    });\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n      setPacientes(currentPacientes => {\r\n        return currentPacientes.filter((currentPaciente) => currentPaciente._id !== pacienteId);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (paciente) => {\r\n    setEditedPaciente(paciente);\r\n  };\r\n\r\n  const handleCloseEdit = () => {\r\n    setEditedPaciente(null); // Restablecer editedPaciente a null para ocultar el componente EditPaciente\r\n  };\r\n\r\n  const updatePacienteList = async () => {\r\n    try {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n    } catch (error) {\r\n      console.error('Error al actualizar la lista de pacientes:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n       <div className='barra-buscador'>\r\n      <input className='buscador'\r\n        type=\"text\"\r\n        placeholder=\"Buscar por nombre\"\r\n        value={searchTerm}\r\n        onChange={handleSearch}\r\n      />\r\n      <img className=\"buscar\" src='/buscar.avif' />\r\n      </div>\r\n     \r\n      <div className='filtrado'>\r\n        <select value={filterByActive} onChange={handleFilterByActiveChange} name='ESTADO'>\r\n          <option value=\"all\">ESTADO</option>\r\n          <option value=\"true\">True</option>\r\n          <option value=\"false\">False</option>\r\n          <option value=\"all\">Todos</option>\r\n        </select>\r\n        \r\n        <select value={filterByGender} onChange={handleFilterByGenderChange}>\r\n          <option value=\"all\">GÉNERO</option>\r\n          <option value=\"male\">Masculino</option>\r\n          <option value=\"female\">Femenino</option>\r\n          <option value=\"all\">Todos</option>\r\n          <option value=\"other\">Otro</option>\r\n        </select>\r\n      </div>\r\n  \r\n  \r\n      {filteredPacientes.map(paciente => (\r\n        <article key={paciente._id} className=\"patient-item\">\r\n          <p className=\"active\">Estado activo:{paciente.active}</p>\r\n          <p className=\"name\">Nombre:{paciente.name}</p>\r\n          <p className=\"gender\">Género:{paciente.gender}</p>\r\n          <p className=\"birthDate\">Fecha de nacimiento:{paciente.birthDate}</p>\r\n          <div>\r\n            <button className=\"edit\" onClick={() => handleEditClick(paciente)}>Editar</button>\r\n            <button className=\"delete\" onClick={() => deletePaciente(paciente._id)}>Borrar</button>\r\n          </div>\r\n        </article>\r\n      ))}\r\n\r\n      {editedPaciente && (\r\n        <EditPaciente paciente={editedPaciente} onClose={handleCloseEdit} updatePacienteList={updatePacienteList} />\r\n      )}\r\n      \r\n    </div>\r\n  );\r\n};\r\nexport default ListPatients;\r\n*/\nvar _c;\n$RefreshReg$(_c, \"ListPatients\");","map":{"version":3,"names":["React","useEffect","useState","EditPaciente","jsxDEV","_jsxDEV","ListPatients","_s","pacientes","setPacientes","editedPaciente","setEditedPaciente","getPacientes","res","fetch","json","deletePaciente","pacienteId","method","acknowledged","currentPacientes","filter","currentPaciente","_id","handleEditClick","paciente","handleCloseEdit","updatePacienteList","error","console","onClose","fileName","_jsxFileName","lineNumber","columnNumber","children","length","map","p","className","active","name","gender","birthDate","onClick","_c","$RefreshReg$"],"sources":["C:/Users/blanc/OneDrive - UNIVERSIDAD DE SEVILLA/Escritorio/4 ING SALUD/Trabajo Fin de Grado/intento/client/src/components/ListPatients.js"],"sourcesContent":["///////////////////////////////////////////////////////////////\r\n//CODIGO SIN FILTRADO NI BUSCADOR\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { EditPaciente } from '../components/EditPaciente';\r\n\r\n\r\nexport const ListPatients = () => {\r\n  // const { pacientes, setPacientes } = props;\r\n\r\n  const [pacientes, setPacientes] = useState([]);\r\n  //const [showEditForm, setShowEditForm] = useState(false);\r\n  const [editedPaciente, setEditedPaciente] = useState(null);\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    async function getPacientes() {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n\r\n    }\r\n    getPacientes();\r\n  }, []);\r\n\r\n\r\n\r\n\r\n  const deletePaciente = async (pacienteId) => {\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n      method: \"DELETE\"\r\n    });\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n      setPacientes(currentPacientes => {\r\n        return currentPacientes.filter((currentPaciente) => currentPaciente._id !== pacienteId);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (paciente) => {\r\n    setEditedPaciente(paciente);\r\n  };\r\n\r\n  const handleCloseEdit = () => {\r\n    setEditedPaciente(null); // Restablecer editedPaciente a null para ocultar el componente EditPaciente\r\n  };\r\n\r\n  const updatePacienteList = async () => {\r\n    try {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n    } catch (error) {\r\n      console.error('Error al actualizar la lista de pacientes:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    \r\n      editedPaciente?(\r\n      <EditPaciente paciente = { editedPaciente } onClose = { handleCloseEdit } updatePacienteList = { updatePacienteList } />\r\n    ): (\r\n          <div>\r\n        {pacientes && pacientes.length > 0 ? (\r\n      pacientes.map(p => (\r\n\r\n        <article key={p._id} className=\"patient-item\">\r\n          <p className=\"active\">Estado activo:{p.active}</p>\r\n          <p className=\"name\">Nombre:{p.name}</p>\r\n          <p className=\"gender\">Género:{p.gender}</p>\r\n          <p className=\"birthDate\">Fecha de nacimiento:{p.birthDate}</p>\r\n          <div>\r\n            <button className=\"edit\" onClick={() => handleEditClick(p)}>Editar</button>\r\n            <button className=\"delete\" onClick={() => deletePaciente(p._id)}>Borrar</button>\r\n          </div>\r\n        </article>\r\n      ))\r\n\r\n\r\n    ) : (\r\n\r\n      <h2>No hay pacientes para mostrar</h2>\r\n    )}\r\n\r\n      </div >\r\n    )\r\n  )\r\n}\r\nexport default ListPatients;\r\n\r\n\r\n\r\n// CODIGO BUSCADOR SOLO\r\n/*\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { EditPaciente } from '../components/EditPaciente';\r\n\r\n\r\nexport const ListPatients = () => {\r\n  // const { pacientes, setPacientes } = props;\r\n\r\n  const [pacientes, setPacientes] = useState([]);\r\n  //const [showEditForm, setShowEditForm] = useState(false);\r\n  const [editedPaciente, setEditedPaciente] = useState(null);\r\n\r\n\r\n  //Para el buscador\r\n  const [filteredPacientes, setFilteredPacientes] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    async function getPacientes() {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n      setFilteredPacientes(pacientes); //pasamos todos los pacientes que hay\r\n    }\r\n    getPacientes();\r\n  }, []);\r\n\r\n  //filtrado para el buscador\r\n \r\n  const handleSearch = (e) => {\r\n    const value = e.target.value;\r\n    setSearchTerm(value);\r\n    const filteredResults = pacientes.filter(paciente =>\r\n      paciente.name.toLowerCase().includes(value.toLowerCase())\r\n\r\n    );\r\n    setFilteredPacientes(filteredResults);\r\n  };\r\n  \r\n \r\n\r\n\r\n\r\n  const deletePaciente = async (pacienteId) => {\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n      method: \"DELETE\"\r\n    });\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n      setPacientes(currentPacientes => {\r\n        return currentPacientes.filter((currentPaciente) => currentPaciente._id !== pacienteId);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (paciente) => {\r\n    setEditedPaciente(paciente);\r\n  };\r\n\r\n  const handleCloseEdit = () => {\r\n    setEditedPaciente(null); // Restablecer editedPaciente a null para ocultar el componente EditPaciente\r\n  };\r\n\r\n  const updatePacienteList = async () => {\r\n    try {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n    } catch (error) {\r\n      console.error('Error al actualizar la lista de pacientes:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n       <div className='barra-buscador'>\r\n      <input className='buscador'\r\n        type=\"text\"\r\n        placeholder=\"Buscar por nombre\"\r\n        value={searchTerm}\r\n        onChange={handleSearch}\r\n      />\r\n      <img className=\"buscar\" src='/buscar.avif' />\r\n      </div>\r\n     \r\n  \r\n  \r\n      {filteredPacientes.map(paciente => (\r\n        <article key={paciente._id} className=\"patient-item\">\r\n          <p className=\"active\">Estado activo:{paciente.active}</p>\r\n          <p className=\"name\">Nombre:{paciente.name}</p>\r\n          <p className=\"gender\">Género:{paciente.gender}</p>\r\n          <p className=\"birthDate\">Fecha de nacimiento:{paciente.birthDate}</p>\r\n          <div>\r\n            <button className=\"edit\" onClick={() => handleEditClick(paciente)}>Editar</button>\r\n            <button className=\"delete\" onClick={() => deletePaciente(paciente._id)}>Borrar</button>\r\n          </div>\r\n        </article>\r\n      ))}\r\n\r\n      {editedPaciente && (\r\n        <EditPaciente paciente={editedPaciente} onClose={handleCloseEdit} updatePacienteList={updatePacienteList} />\r\n      )}\r\n      \r\n    </div>\r\n  );\r\n};\r\nexport default ListPatients;\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n/// CODIGO CON BUSCADOR Y FILTRADO\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { EditPaciente } from '../components/EditPaciente';\r\n\r\n\r\nexport const ListPatients = () => {\r\n  // const { pacientes, setPacientes } = props;\r\n\r\n  const [pacientes, setPacientes] = useState([]);\r\n  //const [showEditForm, setShowEditForm] = useState(false);\r\n  const [editedPaciente, setEditedPaciente] = useState(null);\r\n\r\n\r\n  //Para el buscador\r\n  const [filteredPacientes, setFilteredPacientes] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  //Para el filtrado\r\n  const [filterByActive, setFilterByActive] = useState('all'); // Opción predeterminada: mostrar todos los pacientes\r\n  const [filterByGender, setFilterByGender] = useState('all'); // Opción predeterminada: mostrar todos los pacientes\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n    async function getPacientes() {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n      //setFilteredPacientes(pacientes); //pasamos todos los pacientes que hay\r\n    }\r\n    getPacientes();\r\n  }, []);\r\n\r\n\r\n \r\n  //filtrado + buscador (tambien se tiene que filtrar)\r\n  const handleSearch = (e) => {\r\n    const value = e.target.value;\r\n    setSearchTerm(value);\r\n    filterPacientes(value, filterByActive, filterByGender);\r\n  };\r\n\r\n  const handleFilterByActiveChange = (e) => {\r\n    const value = e.target.value;\r\n    setFilterByActive(value);\r\n    filterPacientes(searchTerm, value, filterByGender);\r\n  };\r\n\r\n  const handleFilterByGenderChange = (e) => {\r\n    const value = e.target.value;\r\n    setFilterByGender(value);\r\n    filterPacientes(searchTerm, filterByActive, value);\r\n  };\r\n\r\n  const filterPacientes = (searchTerm, activeOption, genderOption) => {\r\n    let filteredResults = pacientes.filter(paciente =>\r\n      (paciente.name.toLowerCase().includes(searchTerm.toLowerCase()) || searchTerm === '') &&\r\n      (activeOption === 'all' || paciente.active === activeOption) &&\r\n      (genderOption === 'all' || paciente.gender === genderOption)\r\n    );\r\n    setFilteredPacientes(filteredResults);\r\n  };\r\n\r\n\r\n\r\n  const deletePaciente = async (pacienteId) => {\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n      method: \"DELETE\"\r\n    });\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n      setPacientes(currentPacientes => {\r\n        return currentPacientes.filter((currentPaciente) => currentPaciente._id !== pacienteId);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (paciente) => {\r\n    setEditedPaciente(paciente);\r\n  };\r\n\r\n  const handleCloseEdit = () => {\r\n    setEditedPaciente(null); // Restablecer editedPaciente a null para ocultar el componente EditPaciente\r\n  };\r\n\r\n  const updatePacienteList = async () => {\r\n    try {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n    } catch (error) {\r\n      console.error('Error al actualizar la lista de pacientes:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n       <div className='barra-buscador'>\r\n      <input className='buscador'\r\n        type=\"text\"\r\n        placeholder=\"Buscar por nombre\"\r\n        value={searchTerm}\r\n        onChange={handleSearch}\r\n      />\r\n      <img className=\"buscar\" src='/buscar.avif' />\r\n      </div>\r\n     \r\n      <div className='filtrado'>\r\n        <select value={filterByActive} onChange={handleFilterByActiveChange} name='ESTADO'>\r\n          <option value=\"all\">ESTADO</option>\r\n          <option value=\"true\">True</option>\r\n          <option value=\"false\">False</option>\r\n          <option value=\"all\">Todos</option>\r\n        </select>\r\n        \r\n        <select value={filterByGender} onChange={handleFilterByGenderChange}>\r\n          <option value=\"all\">GÉNERO</option>\r\n          <option value=\"male\">Masculino</option>\r\n          <option value=\"female\">Femenino</option>\r\n          <option value=\"all\">Todos</option>\r\n          <option value=\"other\">Otro</option>\r\n        </select>\r\n      </div>\r\n  \r\n  \r\n      {filteredPacientes.map(paciente => (\r\n        <article key={paciente._id} className=\"patient-item\">\r\n          <p className=\"active\">Estado activo:{paciente.active}</p>\r\n          <p className=\"name\">Nombre:{paciente.name}</p>\r\n          <p className=\"gender\">Género:{paciente.gender}</p>\r\n          <p className=\"birthDate\">Fecha de nacimiento:{paciente.birthDate}</p>\r\n          <div>\r\n            <button className=\"edit\" onClick={() => handleEditClick(paciente)}>Editar</button>\r\n            <button className=\"delete\" onClick={() => deletePaciente(paciente._id)}>Borrar</button>\r\n          </div>\r\n        </article>\r\n      ))}\r\n\r\n      {editedPaciente && (\r\n        <EditPaciente paciente={editedPaciente} onClose={handleCloseEdit} updatePacienteList={updatePacienteList} />\r\n      )}\r\n      \r\n    </div>\r\n  );\r\n};\r\nexport default ListPatients;\r\n*/\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}