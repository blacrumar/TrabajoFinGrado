{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blanc\\\\OneDrive - UNIVERSIDAD DE SEVILLA\\\\Escritorio\\\\4 ING SALUD\\\\Trabajo Fin de Grado\\\\intento\\\\client\\\\src\\\\components\\\\ListPatients.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useEffect, useState } from 'react';\n//import { MongoClient } from 'mongodb'\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ListPatients = props => {\n  _s();\n  const {\n    paciente,\n    setPacientes\n  } = props;\n\n  //Creamos un estado para poder listar todas los pacientes que tenga el array del localstorage\n  //este estado inicialmente estara vacio por eso se ponen corchetes vacios\n  const [listadoState, setListadoState] = useState([]);\n  /*\r\n    //vamos a usar el hook use effect pq es lo que se va a ejecutar nada mas cargar el componente\r\n   //Por eso la lista vacia como segundo componente\r\n   useEffect(() => {\r\n     getPatient();\r\n   }, []);\r\n  \n   const getPatient = () => {\r\n     //el objeto que recogemos lo pasamos a un objeto usable, por eso hacemos JSON.parse\r\n     let patients = JSON.parse(localStorage.getItem(\"patients\")); //FETCH\r\n     //guardamos los pacientes sacados del array del localstorage en el estado\r\n     setListadoState(patients);\r\n   }\r\n  */\n  const updatePaciente = async (pacienteId, pacienteStatus) => {\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\n      method: \"PUT\",\n      body: JSON.stringify({\n        status: pacienteStatus\n      }),\n      headers: {\n        \"Content-Type\": \"applicacion/json\"\n      }\n    });\n    /*\r\n        //Creo que este codigo es para el caso del video\r\n        //hay un checkbox al lado de cada paciente para hacer tick o quitarlo\r\n        //cambia la propiedad status de true a false\r\n        const json = await res.json();\r\n        if (json.acknowledged) {\r\n            setPacientes(currentPacientes => {\r\n                return currentPacientes.map((currentPaciente) => {\r\n                    if (currentPaciente._id === pacienteId) {\r\n                        return { ...currentPaciente, status: !currentPaciente.status }\r\n                    }\r\n                    return currentPaciente;\r\n                })\r\n    \r\n            })\r\n        }\r\n      */\n  };\n  const deletePaciente = async pacienteId => {\n    const res = await fetch(`api/pacientes/${pacienteId}`, {\n      method: \"DELETE\"\n    });\n    const json = await res.json();\n    if (json.acknowledged) {\n      setPacientes(currentPacientes => {\n        return currentPacientes.filter(currentPaciente => currentPaciente._id !== pacienteId);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: listadoState != null ? listadoState.map(paciente => {\n      return /*#__PURE__*/_jsxDEV(\"article\", {\n        className: \"patient-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"active\",\n          children: paciente.active\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"name\",\n          children: paciente.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"gender\",\n          children: paciente.gender\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"birthDate\",\n          children: paciente.birthDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"edit\",\n          children: \"Editar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"delete\",\n          onClick: () => deletePaciente(paciente.id),\n          children: \"Borrar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 23\n        }, this)]\n      }, paciente.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"No hay pacientes para mostrar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }, this)\n  }, void 0, false);\n};\n_s(ListPatients, \"UlgohqpZYM+UOOdX5O6cgzi8Kj8=\");\n_c = ListPatients;\nvar _c;\n$RefreshReg$(_c, \"ListPatients\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","ListPatients","props","_s","paciente","setPacientes","listadoState","setListadoState","updatePaciente","pacienteId","pacienteStatus","res","fetch","method","body","JSON","stringify","status","headers","deletePaciente","json","acknowledged","currentPacientes","filter","currentPaciente","_id","children","map","className","active","fileName","_jsxFileName","lineNumber","columnNumber","name","gender","birthDate","onClick","id","_c","$RefreshReg$"],"sources":["C:/Users/blanc/OneDrive - UNIVERSIDAD DE SEVILLA/Escritorio/4 ING SALUD/Trabajo Fin de Grado/intento/client/src/components/ListPatients.js"],"sourcesContent":["import React from 'react'\r\nimport { useEffect, useState } from 'react'\r\n//import { MongoClient } from 'mongodb'\r\n\r\nexport const ListPatients = (props) =>  {\r\n  const { paciente, setPacientes } = props;\r\n\r\n  //Creamos un estado para poder listar todas los pacientes que tenga el array del localstorage\r\n  //este estado inicialmente estara vacio por eso se ponen corchetes vacios\r\n  const [listadoState, setListadoState] = useState([]);\r\n /*\r\n   //vamos a usar el hook use effect pq es lo que se va a ejecutar nada mas cargar el componente\r\n  //Por eso la lista vacia como segundo componente\r\n  useEffect(() => {\r\n    getPatient();\r\n  }, []);\r\n\r\n  const getPatient = () => {\r\n    //el objeto que recogemos lo pasamos a un objeto usable, por eso hacemos JSON.parse\r\n    let patients = JSON.parse(localStorage.getItem(\"patients\")); //FETCH\r\n    //guardamos los pacientes sacados del array del localstorage en el estado\r\n    setListadoState(patients);\r\n  }\r\n*/\r\n  const updatePaciente = async (pacienteId, pacienteStatus) => {\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({ status: pacienteStatus }),\r\n        headers: {\r\n            \"Content-Type\": \"applicacion/json\"\r\n        },\r\n\r\n    });\r\n/*\r\n    //Creo que este codigo es para el caso del video\r\n    //hay un checkbox al lado de cada paciente para hacer tick o quitarlo\r\n    //cambia la propiedad status de true a false\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n        setPacientes(currentPacientes => {\r\n            return currentPacientes.map((currentPaciente) => {\r\n                if (currentPaciente._id === pacienteId) {\r\n                    return { ...currentPaciente, status: !currentPaciente.status }\r\n                }\r\n                return currentPaciente;\r\n            })\r\n\r\n        })\r\n    }\r\n  */\r\n};\r\n\r\n\r\n  const deletePaciente = async (pacienteId) => {\r\n    const res = await fetch(`api/pacientes/${pacienteId}`, {\r\n        method: \"DELETE\"\r\n    });\r\n    const json = await res.json();\r\n    if(json.acknowledged){\r\n        setPacientes(currentPacientes => {\r\n            return currentPacientes\r\n            .filter((currentPaciente) => (currentPaciente._id !== pacienteId));\r\n        })\r\n    }\r\n}\r\n\r\n \r\n    \r\n  return (\r\n\r\n    \r\n    <>\r\n    \r\n    \r\n     {listadoState != null ?\r\n            listadoState.map(paciente => {\r\n              return(\r\n                <article key={paciente.id} className=\"patient-item\">\r\n                      <p className=\"active\">{paciente.active}</p>\r\n                      <p className=\"name\">{paciente.name}</p>\r\n                      <p className=\"gender\">{paciente.gender}</p>\r\n                      <p className=\"birthDate\">{paciente.birthDate}</p>\r\n\r\n                      <button className=\"edit\">Editar</button>\r\n                      <button className=\"delete\" onClick={() => deletePaciente(paciente.id)}>Borrar</button>\r\n                  </article>\r\n\r\n              );\r\n            })\r\n        : <h2>No hay pacientes para mostrar</h2>\r\n    } \r\n    </>\r\n  )\r\n\r\n}\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}