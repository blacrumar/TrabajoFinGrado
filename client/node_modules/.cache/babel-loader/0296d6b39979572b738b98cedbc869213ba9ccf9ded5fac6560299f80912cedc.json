{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blanc\\\\OneDrive - UNIVERSIDAD DE SEVILLA\\\\Escritorio\\\\4 ING SALUD\\\\Trabajo Fin de Grado\\\\intento\\\\client\\\\src\\\\components\\\\ListPatients.js\",\n  _s = $RefreshSig$();\n/*\r\nimport React from 'react'\r\nimport { useEffect, useState } from 'react'\r\n//import { MongoClient } from 'mongodb'\r\n\r\nexport const ListPatients = (props) =>  {\r\n  const { paciente, setPacientes } = props;\r\n\r\n  //Creamos un estado para poder listar todas los pacientes que tenga el array del localstorage\r\n  //este estado inicialmente estara vacio por eso se ponen corchetes vacios\r\n  const [listadoState, setListadoState] = useState([]);\r\n /*\r\n   //vamos a usar el hook use effect pq es lo que se va a ejecutar nada mas cargar el componente\r\n  //Por eso la lista vacia como segundo componente\r\n  useEffect(() => {\r\n    getPatient();\r\n  }, []);\r\n\r\n  const getPatient = () => {\r\n    //el objeto que recogemos lo pasamos a un objeto usable, por eso hacemos JSON.parse\r\n    let patients = JSON.parse(localStorage.getItem(\"patients\")); //FETCH\r\n    //guardamos los pacientes sacados del array del localstorage en el estado\r\n    setListadoState(patients);\r\n  }\r\n*/\n/*\r\n  const updatePaciente = async (pacienteId, pacienteStatus) => {\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({ status: pacienteStatus }),\r\n        headers: {\r\n            \"Content-Type\": \"applicacion/json\"\r\n        },\r\n\r\n    });\r\n*/\n/*\r\n    //Creo que este codigo es para el caso del video\r\n    //hay un checkbox al lado de cada paciente para hacer tick o quitarlo\r\n    //cambia la propiedad status de true a false\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n        setPacientes(currentPacientes => {\r\n            return currentPacientes.map((currentPaciente) => {\r\n                if (currentPaciente._id === pacienteId) {\r\n                    return { ...currentPaciente, status: !currentPaciente.status }\r\n                }\r\n                return currentPaciente;\r\n            })\r\n\r\n        })\r\n    }\r\n  \r\n};\r\n\r\n*/\n/*\r\n  const deletePaciente = async (pacienteId) => {\r\n    const res = await fetch(`api/pacientes/${pacienteId}`, {\r\n        method: \"DELETE\"\r\n    });\r\n    const json = await res.json();\r\n    if(json.acknowledged){\r\n        setPacientes(currentPacientes => {\r\n            return currentPacientes\r\n            .filter((currentPaciente) => (currentPaciente._id !== pacienteId));\r\n        })\r\n    }\r\n}\r\n\r\n \r\n    \r\n  return (\r\n\r\n    \r\n    <>\r\n    \r\n    \r\n     {paciente != null ?\r\n            paciente.map(p => {\r\n              return(\r\n                <article key={paciente._id} className=\"patient-item\">\r\n                      <p className=\"active\">{paciente.active}</p>\r\n                      <p className=\"name\">{paciente.name}</p>\r\n                      <p className=\"gender\">{paciente.gender}</p>\r\n                      <p className=\"birthDate\">{paciente.birthDate}</p>\r\n\r\n                      <button className=\"edit\">Editar</button>\r\n                      <button className=\"delete\" onClick={() => deletePaciente(paciente._id)}>Borrar</button>\r\n                  </article>\r\n\r\n              );\r\n            })\r\n        : <h2>No hay pacientes para mostrar</h2>\r\n    } \r\n    </>\r\n  )\r\n\r\n\r\n\r\n}*/\n\n///////////////////////////////////////////////////////////////\n//CODIGO CHATGPT\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListPatients = () => {\n  _s();\n  // const { pacientes, setPacientes } = props;\n\n  const [pacientes, setPacientes] = useState([]);\n  const [content, setContent] = useState(\"\");\n  useEffect(() => {\n    async function getPacientes() {\n      const res = await fetch(\"/api/pacientes\");\n      const pacientes = await res.json();\n      setPacientes(pacientes);\n    }\n    getPacientes();\n  }, []);\n  const deletePaciente = async pacienteId => {\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\n      method: \"DELETE\"\n    });\n    const json = await res.json();\n    if (json.acknowledged) {\n      setPacientes(currentPacientes => {\n        return currentPacientes.filter(currentPaciente => currentPaciente._id !== pacienteId);\n      });\n    }\n  };\n  const updatePaciente = async (pacienteId, nuevosDatos) => {\n    try {\n      const res = await fetch(`/api/pacientes/${pacienteId}`, {\n        method: \"PUT\",\n        body: JSON.stringify(nuevosDatos),\n        headers: {\n          \"Content-Type\": \"applicacion/json\"\n        }\n      });\n      const json = await res.json();\n      if (json.acknowledged) {\n        setPacientes(currentPacientes => {\n          return currentPacientes.map(currentPaciente => {\n            if (currentPaciente._id === pacienteId) {\n              return {\n                ...currentPaciente,\n                ...nuevosDatos\n              };\n            }\n            return currentPaciente;\n          });\n        });\n      }\n    } catch (error) {\n      console.log(\"Error al actualizar el paciente:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log(\"p=\", pacientes), pacientes && pacientes.length > 0 ? pacientes.map(p => {\n      return /*#__PURE__*/_jsxDEV(\"article\", {\n        className: \"patient-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"active\",\n          children: [\"Estado activo:\", p.active]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"name\",\n          children: [\"Nombre:\", p.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"gender\",\n          children: [\"G\\xE9nero:\", p.gender]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"birthDate\",\n          children: [\"Fecha de nacimiento:\", p.birthDate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"edit\",\n          onClick: () => updatePaciente(p._id),\n          children: \"Editar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"delete\",\n          onClick: () => deletePaciente(p._id),\n          children: \"Borrar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 15\n        }, this)]\n      }, p._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"No hay pacientes para mostrar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n_s(ListPatients, \"cJQyQT3P56cWyOn1fg7xaV+Jx/o=\");\n_c = ListPatients;\nvar _c;\n$RefreshReg$(_c, \"ListPatients\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ListPatients","_s","pacientes","setPacientes","content","setContent","getPacientes","res","fetch","json","deletePaciente","pacienteId","method","acknowledged","currentPacientes","filter","currentPaciente","_id","updatePaciente","nuevosDatos","body","JSON","stringify","headers","map","error","console","log","children","length","p","className","active","fileName","_jsxFileName","lineNumber","columnNumber","name","gender","birthDate","onClick","_c","$RefreshReg$"],"sources":["C:/Users/blanc/OneDrive - UNIVERSIDAD DE SEVILLA/Escritorio/4 ING SALUD/Trabajo Fin de Grado/intento/client/src/components/ListPatients.js"],"sourcesContent":["/*\r\nimport React from 'react'\r\nimport { useEffect, useState } from 'react'\r\n//import { MongoClient } from 'mongodb'\r\n\r\nexport const ListPatients = (props) =>  {\r\n  const { paciente, setPacientes } = props;\r\n\r\n  //Creamos un estado para poder listar todas los pacientes que tenga el array del localstorage\r\n  //este estado inicialmente estara vacio por eso se ponen corchetes vacios\r\n  const [listadoState, setListadoState] = useState([]);\r\n /*\r\n   //vamos a usar el hook use effect pq es lo que se va a ejecutar nada mas cargar el componente\r\n  //Por eso la lista vacia como segundo componente\r\n  useEffect(() => {\r\n    getPatient();\r\n  }, []);\r\n\r\n  const getPatient = () => {\r\n    //el objeto que recogemos lo pasamos a un objeto usable, por eso hacemos JSON.parse\r\n    let patients = JSON.parse(localStorage.getItem(\"patients\")); //FETCH\r\n    //guardamos los pacientes sacados del array del localstorage en el estado\r\n    setListadoState(patients);\r\n  }\r\n*/\r\n/*\r\n  const updatePaciente = async (pacienteId, pacienteStatus) => {\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({ status: pacienteStatus }),\r\n        headers: {\r\n            \"Content-Type\": \"applicacion/json\"\r\n        },\r\n\r\n    });\r\n*/\r\n/*\r\n    //Creo que este codigo es para el caso del video\r\n    //hay un checkbox al lado de cada paciente para hacer tick o quitarlo\r\n    //cambia la propiedad status de true a false\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n        setPacientes(currentPacientes => {\r\n            return currentPacientes.map((currentPaciente) => {\r\n                if (currentPaciente._id === pacienteId) {\r\n                    return { ...currentPaciente, status: !currentPaciente.status }\r\n                }\r\n                return currentPaciente;\r\n            })\r\n\r\n        })\r\n    }\r\n  \r\n};\r\n\r\n*/\r\n/*\r\n  const deletePaciente = async (pacienteId) => {\r\n    const res = await fetch(`api/pacientes/${pacienteId}`, {\r\n        method: \"DELETE\"\r\n    });\r\n    const json = await res.json();\r\n    if(json.acknowledged){\r\n        setPacientes(currentPacientes => {\r\n            return currentPacientes\r\n            .filter((currentPaciente) => (currentPaciente._id !== pacienteId));\r\n        })\r\n    }\r\n}\r\n\r\n \r\n    \r\n  return (\r\n\r\n    \r\n    <>\r\n    \r\n    \r\n     {paciente != null ?\r\n            paciente.map(p => {\r\n              return(\r\n                <article key={paciente._id} className=\"patient-item\">\r\n                      <p className=\"active\">{paciente.active}</p>\r\n                      <p className=\"name\">{paciente.name}</p>\r\n                      <p className=\"gender\">{paciente.gender}</p>\r\n                      <p className=\"birthDate\">{paciente.birthDate}</p>\r\n\r\n                      <button className=\"edit\">Editar</button>\r\n                      <button className=\"delete\" onClick={() => deletePaciente(paciente._id)}>Borrar</button>\r\n                  </article>\r\n\r\n              );\r\n            })\r\n        : <h2>No hay pacientes para mostrar</h2>\r\n    } \r\n    </>\r\n  )\r\n\r\n\r\n\r\n}*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////\r\n//CODIGO CHATGPT\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nexport const ListPatients = () => {\r\n // const { pacientes, setPacientes } = props;\r\n\r\n  const [pacientes, setPacientes] = useState([]); \r\n  const [content, setContent] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function getPacientes() {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n\r\n    }\r\n    getPacientes();\r\n\r\n\r\n  }, []);\r\n\r\n  const deletePaciente = async (pacienteId) => {\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n      method: \"DELETE\"\r\n    });\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n      setPacientes(currentPacientes => {\r\n        return currentPacientes.filter((currentPaciente) => currentPaciente._id !== pacienteId);\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  const updatePaciente = async (pacienteId, nuevosDatos) => {\r\n    \r\n    try{\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify(nuevosDatos),\r\n        headers: {\r\n            \"Content-Type\": \"applicacion/json\"\r\n        },\r\n\r\n    });\r\n\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n        setPacientes(currentPacientes => {\r\n            return currentPacientes.map((currentPaciente) => {\r\n                if (currentPaciente._id === pacienteId) {\r\n                    return { ...currentPaciente, ...nuevosDatos };\r\n                }\r\n                return currentPaciente;\r\n            });\r\n\r\n        });\r\n    }\r\n  }catch (error){\r\n    console.log(\"Error al actualizar el paciente:\", error);\r\n  }\r\n};\r\n\r\n  return (\r\n    <div>\r\n    {console.log(\"p=\", pacientes)}\r\n      {pacientes && pacientes.length > 0 ?\r\n        pacientes.map(p => {\r\n          return (\r\n            <article key={p._id} className=\"patient-item\">\r\n              <p className=\"active\">Estado activo:{p.active}</p>\r\n              <p className=\"name\">Nombre:{p.name}</p>\r\n              <p className=\"gender\">Género:{p.gender}</p>\r\n              <p className=\"birthDate\">Fecha de nacimiento:{p.birthDate}</p>\r\n              <button className=\"edit\" onClick={() => updatePaciente(p._id)}>Editar</button>\r\n              <button className=\"delete\" onClick={() => deletePaciente(p._id)}>Borrar</button>\r\n            </article>\r\n          );\r\n        }) : \r\n        <h2>No hay pacientes para mostrar</h2>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}