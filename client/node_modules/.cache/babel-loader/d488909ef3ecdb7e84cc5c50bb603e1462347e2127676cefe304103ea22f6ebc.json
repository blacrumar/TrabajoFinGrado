{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blanc\\\\OneDrive - UNIVERSIDAD DE SEVILLA\\\\Escritorio\\\\4 ING SALUD\\\\Trabajo Fin de Grado\\\\intento\\\\client\\\\src\\\\components\\\\ListPatients.js\",\n  _s = $RefreshSig$();\n///////////////////////////////////////////////////////////////\n//CODIGO SIN FILTRADO NI BUSCADOR\n\nimport React, { useEffect, useState } from 'react';\nimport { EditPaciente } from '../components/EditPaciente';\nimport { ListObservations } from '../components/ListObservations';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListPatients = () => {\n  _s();\n  // const { pacientes, setPacientes } = props;\n\n  const [pacientes, setPacientes] = useState([]);\n  //const [showEditForm, setShowEditForm] = useState(false);\n  const [editedPaciente, setEditedPaciente] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    async function getPacientes() {\n      const res = await fetch(\"/api/pacientes\");\n      const pacientes = await res.json();\n      setPacientes(pacientes);\n    }\n    getPacientes();\n  }, []);\n  useEffect(() => {\n    if (editedPaciente === null) {\n      updatePacienteList(); // Actualizar la lista de pacientes cuando se cierra el formulario de edición\n    }\n  }, [editedPaciente]);\n  const deletePaciente = async pacienteId => {\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\n      method: \"DELETE\"\n    });\n    const json = await res.json();\n    if (json.acknowledged) {\n      setPacientes(currentPacientes => {\n        return currentPacientes.filter(currentPaciente => currentPaciente._id !== pacienteId);\n      });\n    }\n  };\n  const handleEditClick = paciente => {\n    setEditedPaciente(paciente);\n  };\n  const handleCloseEdit = () => {\n    setEditedPaciente(null); // Restablecer editedPaciente a null para ocultar el componente EditPaciente\n    updatePacienteList();\n  };\n  const updatePacienteList = async () => {\n    try {\n      const res = await fetch(\"/api/pacientes\");\n      const pacientes = await res.json();\n      setPacientes(pacientes);\n    } catch (error) {\n      console.error('Error al actualizar la lista de pacientes:', error);\n    }\n  };\n  const historialPaciente = paciente => {\n    console.log('Mostrar historial medico del paciente', paciente);\n    navigate(`/historial/${paciente._id}`);\n  };\n  return editedPaciente ? /*#__PURE__*/_jsxDEV(EditPaciente, {\n    paciente: editedPaciente,\n    onClose: handleCloseEdit,\n    updatePacienteList: updatePacienteList\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: pacientes && pacientes.length > 0 ? pacientes.map(p => /*#__PURE__*/_jsxDEV(\"article\", {\n      className: \"patient-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"active\",\n        children: [\"Estado:\", p.active ? ' Activo' : ' Inactivo']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }, this), p.name && p.name.length > 0 && p.name.map(name => name.use === 'official' && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"officialName\",\n        children: [\"Nombre oficial:\", name.given.join(' ') + ' ' + name.family]\n      }, `official_${name.given.join(' ')}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)), p.name && p.name.length > 0 && p.name.map(name => name.use === 'usual' && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"usualName\",\n        children: [\"Apodo: \", name.given[0]]\n      }, `usual_${name.given[0]}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"gender\",\n        children: [\"G\\xE9nero:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }, this), p.gender]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"birthDate\",\n        children: [\"Fecha de nacimiento:\", new Date(p.birthDate).toLocaleDateString('es-ES')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"telecom\",\n        children: [\"Contacto: \", p.telecom[2].value]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"editButton\",\n          onClick: () => handleEditClick(p),\n          children: \"Editar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"deleteButton\",\n          onClick: () => deletePaciente(p._id),\n          children: \"Borrar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"historialButton\",\n          onClick: () => historialPaciente(p),\n          children: \"Ver historial m\\xE9dico\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(ListObservations, {\n          pacienteId: p._id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 15\n      }, this)]\n    }, p._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"No hay pacientes para mostrar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 7\n  }, this);\n};\n_s(ListPatients, \"HNX40TMozqwr7xqslxCPzz6buyQ=\", false, function () {\n  return [useNavigate];\n});\n_c = ListPatients;\nexport default ListPatients;\n\n// CODIGO BUSCADOR SOLO\n/*\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { EditPaciente } from '../components/EditPaciente';\r\n\r\n\r\nexport const ListPatients = () => {\r\n  // const { pacientes, setPacientes } = props;\r\n\r\n  const [pacientes, setPacientes] = useState([]);\r\n  //const [showEditForm, setShowEditForm] = useState(false);\r\n  const [editedPaciente, setEditedPaciente] = useState(null);\r\n\r\n\r\n  //Para el buscador\r\n  const [filteredPacientes, setFilteredPacientes] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    async function getPacientes() {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n      setFilteredPacientes(pacientes); //pasamos todos los pacientes que hay\r\n    }\r\n    getPacientes();\r\n  }, []);\r\n\r\n  //filtrado para el buscador\r\n\r\n  const handleSearch = (e) => {\r\n    const value = e.target.value;\r\n    setSearchTerm(value);\r\n    const filteredResults = pacientes.filter(paciente =>\r\n      paciente.name.toLowerCase().includes(value.toLowerCase())\r\n\r\n    );\r\n    setFilteredPacientes(filteredResults);\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  const deletePaciente = async (pacienteId) => {\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n      method: \"DELETE\"\r\n    });\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n      setPacientes(currentPacientes => {\r\n        return currentPacientes.filter((currentPaciente) => currentPaciente._id !== pacienteId);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (paciente) => {\r\n    setEditedPaciente(paciente);\r\n  };\r\n\r\n  const handleCloseEdit = () => {\r\n    setEditedPaciente(null); // Restablecer editedPaciente a null para ocultar el componente EditPaciente\r\n  };\r\n\r\n  const updatePacienteList = async () => {\r\n    try {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n    } catch (error) {\r\n      console.error('Error al actualizar la lista de pacientes:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n       <div className='barra-buscador'>\r\n      <input className='buscador'\r\n        type=\"text\"\r\n        placeholder=\"Buscar por nombre\"\r\n        value={searchTerm}\r\n        onChange={handleSearch}\r\n      />\r\n      <img className=\"buscar\" src='/buscar.avif' />\r\n      </div>\r\n\r\n\r\n\r\n      {filteredPacientes.map(paciente => (\r\n        <article key={paciente._id} className=\"patient-item\">\r\n          <p className=\"active\">Estado activo:{paciente.active}</p>\r\n          <p className=\"name\">Nombre:{paciente.name}</p>\r\n          <p className=\"gender\">Género:{paciente.gender}</p>\r\n          <p className=\"birthDate\">Fecha de nacimiento:{paciente.birthDate}</p>\r\n          <div>\r\n            <button className=\"edit\" onClick={() => handleEditClick(paciente)}>Editar</button>\r\n            <button className=\"delete\" onClick={() => deletePaciente(paciente._id)}>Borrar</button>\r\n          </div>\r\n        </article>\r\n      ))}\r\n\r\n      {editedPaciente && (\r\n        <EditPaciente paciente={editedPaciente} onClose={handleCloseEdit} updatePacienteList={updatePacienteList} />\r\n      )}\r\n\r\n    </div>\r\n  );\r\n};\r\nexport default ListPatients;\r\n*/\n\n/// CODIGO CON BUSCADOR Y FILTRADO\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport { EditPaciente } from '../components/EditPaciente';\r\n\r\n\r\nexport const ListPatients = () => {\r\n  // const { pacientes, setPacientes } = props;\r\n\r\n  const [pacientes, setPacientes] = useState([]);\r\n  //const [showEditForm, setShowEditForm] = useState(false);\r\n  const [editedPaciente, setEditedPaciente] = useState(null);\r\n\r\n\r\n  //Para el buscador\r\n  const [filteredPacientes, setFilteredPacientes] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  //Para el filtrado\r\n  const [filterByActive, setFilterByActive] = useState('all'); // Opción predeterminada: mostrar todos los pacientes\r\n  const [filterByGender, setFilterByGender] = useState('all'); // Opción predeterminada: mostrar todos los pacientes\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n    async function getPacientes() {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n      setFilteredPacientes(pacientes); //pasamos todos los pacientes que hay\r\n    }\r\n    getPacientes();\r\n  }, []);\r\n\r\n\r\n \r\n  //filtrado + buscador (tambien se tiene que filtrar)\r\n  const handleSearch = (e) => {\r\n    const value = e.target.value;\r\n    setSearchTerm(value);\r\n    filterPacientes(value, filterByActive, filterByGender);\r\n  };\r\n\r\n  const handleFilterByActiveChange = (e) => {\r\n    const value = e.target.value;\r\n    setFilterByActive(value);\r\n    filterPacientes(searchTerm, value, filterByGender);\r\n  };\r\n\r\n  const handleFilterByGenderChange = (e) => {\r\n    const value = e.target.value;\r\n    setFilterByGender(value);\r\n    filterPacientes(searchTerm, filterByActive, value);\r\n  };\r\n\r\n  const filterPacientes = (searchTerm, activeOption, genderOption) => {\r\n    let filteredResults = pacientes.filter(paciente =>\r\n      (paciente.name.toLowerCase().includes(searchTerm.toLowerCase()) || searchTerm === '') &&\r\n      (activeOption === 'all' || paciente.active === activeOption) &&\r\n      (genderOption === 'all' || paciente.gender === genderOption)\r\n    );\r\n    setFilteredPacientes(filteredResults);\r\n  };\r\n\r\n\r\n\r\n  const deletePaciente = async (pacienteId) => {\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n      method: \"DELETE\"\r\n    });\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n      setPacientes(currentPacientes => {\r\n        return currentPacientes.filter((currentPaciente) => currentPaciente._id !== pacienteId);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (paciente) => {\r\n    setEditedPaciente(paciente);\r\n  };\r\n\r\n  const handleCloseEdit = () => {\r\n    setEditedPaciente(null); // Restablecer editedPaciente a null para ocultar el componente EditPaciente\r\n  };\r\n\r\n  const updatePacienteList = async () => {\r\n    try {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n    } catch (error) {\r\n      console.error('Error al actualizar la lista de pacientes:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n       <div className='barra-buscador'>\r\n      <input className='buscador'\r\n        type=\"text\"\r\n        placeholder=\"Buscar por nombre\"\r\n        value={searchTerm}\r\n        onChange={handleSearch}\r\n      />\r\n      <img className=\"buscar\" src='/buscar.avif' />\r\n      </div>\r\n     \r\n      <div className='filtrado'>\r\n        <select value={filterByActive} onChange={handleFilterByActiveChange} name='ESTADO'>\r\n          <option value=\"all\">ESTADO</option>\r\n          <option value=\"true\">True</option>\r\n          <option value=\"false\">False</option>\r\n          <option value=\"all\">Todos</option>\r\n        </select>\r\n        \r\n        <select value={filterByGender} onChange={handleFilterByGenderChange}>\r\n          <option value=\"all\">GÉNERO</option>\r\n          <option value=\"male\">Masculino</option>\r\n          <option value=\"female\">Femenino</option>\r\n          <option value=\"all\">Todos</option>\r\n          <option value=\"other\">Otro</option>\r\n        </select>\r\n      </div>\r\n  \r\n  \r\n      {filteredPacientes.map(paciente => (\r\n        <article key={paciente._id} className=\"patient-item\">\r\n          <p className=\"active\">Estado activo:{paciente.active}</p>\r\n          <p className=\"name\">Nombre:{paciente.name}</p>\r\n          <p className=\"gender\">Género:{paciente.gender}</p>\r\n          <p className=\"birthDate\">Fecha de nacimiento:{paciente.birthDate}</p>\r\n          <div>\r\n            <button className=\"edit\" onClick={() => handleEditClick(paciente)}>Editar</button>\r\n            <button className=\"delete\" onClick={() => deletePaciente(paciente._id)}>Borrar</button>\r\n          </div>\r\n        </article>\r\n      ))}\r\n\r\n      {editedPaciente && (\r\n        <EditPaciente paciente={editedPaciente} onClose={handleCloseEdit} updatePacienteList={updatePacienteList} />\r\n      )}\r\n      \r\n    </div>\r\n  );\r\n};\r\nexport default ListPatients;\r\n\r\n*/\nvar _c;\n$RefreshReg$(_c, \"ListPatients\");","map":{"version":3,"names":["React","useEffect","useState","EditPaciente","ListObservations","useNavigate","jsxDEV","_jsxDEV","ListPatients","_s","pacientes","setPacientes","editedPaciente","setEditedPaciente","navigate","getPacientes","res","fetch","json","updatePacienteList","deletePaciente","pacienteId","method","acknowledged","currentPacientes","filter","currentPaciente","_id","handleEditClick","paciente","handleCloseEdit","error","console","historialPaciente","log","onClose","fileName","_jsxFileName","lineNumber","columnNumber","children","length","map","p","className","active","name","use","given","join","family","gender","Date","birthDate","toLocaleDateString","telecom","value","onClick","_c","$RefreshReg$"],"sources":["C:/Users/blanc/OneDrive - UNIVERSIDAD DE SEVILLA/Escritorio/4 ING SALUD/Trabajo Fin de Grado/intento/client/src/components/ListPatients.js"],"sourcesContent":["///////////////////////////////////////////////////////////////\r\n//CODIGO SIN FILTRADO NI BUSCADOR\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { EditPaciente } from '../components/EditPaciente';\r\nimport {ListObservations} from '../components/ListObservations';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\n\r\nexport const ListPatients = () => {\r\n  // const { pacientes, setPacientes } = props;\r\n\r\n  const [pacientes, setPacientes] = useState([]);\r\n  //const [showEditForm, setShowEditForm] = useState(false);\r\n  const [editedPaciente, setEditedPaciente] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    async function getPacientes() {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n\r\n    }\r\n    getPacientes();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (editedPaciente === null) {\r\n      updatePacienteList(); // Actualizar la lista de pacientes cuando se cierra el formulario de edición\r\n    }\r\n  }, [editedPaciente]);\r\n\r\n\r\n\r\n\r\n  const deletePaciente = async (pacienteId) => {\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n      method: \"DELETE\"\r\n    });\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n      setPacientes(currentPacientes => {\r\n        return currentPacientes.filter((currentPaciente) => currentPaciente._id !== pacienteId);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (paciente) => {\r\n    setEditedPaciente(paciente);\r\n  };\r\n\r\n  const handleCloseEdit = () => {\r\n    setEditedPaciente(null); // Restablecer editedPaciente a null para ocultar el componente EditPaciente\r\n    updatePacienteList();\r\n  };\r\n\r\n  const updatePacienteList = async () => {\r\n    try {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n    } catch (error) {\r\n      console.error('Error al actualizar la lista de pacientes:', error);\r\n    }\r\n  };\r\n\r\n  const historialPaciente = (paciente) => {\r\n    console.log('Mostrar historial medico del paciente', paciente);\r\n    navigate(`/historial/${paciente._id}`)\r\n  }\r\n\r\n\r\n\r\n  return (\r\n\r\n    editedPaciente ? (\r\n      <EditPaciente paciente={editedPaciente} onClose={handleCloseEdit} updatePacienteList={updatePacienteList} />\r\n    ) : (\r\n      <div>\r\n        {pacientes && pacientes.length > 0 ? (\r\n          pacientes.map(p => (\r\n\r\n            <article key={p._id} className=\"patient-item\">\r\n              <p className=\"active\">Estado:{p.active ? ' Activo' : ' Inactivo'}</p>\r\n              {p.name && p.name.length > 0 && p.name.map(name => name.use === 'official' && (\r\n                <p key={`official_${name.given.join(' ')}`} className='officialName'>\r\n                  Nombre oficial:\r\n                  {name.given.join(' ') + ' ' + name.family}</p>\r\n              ))}\r\n              {p.name && p.name.length > 0 && p.name.map(name => name.use === 'usual' && (\r\n                <p key={`usual_${name.given[0]}`} className='usualName'>\r\n                  Apodo: {name.given[0]}\r\n                </p>\r\n              ))}\r\n              \r\n             \r\n              <p className=\"gender\">\r\n                Género:\r\n                <br />\r\n                {p.gender}</p>\r\n              <p className=\"birthDate\">Fecha de nacimiento:{new Date(p.birthDate).toLocaleDateString('es-ES')}</p>\r\n              <p className='telecom'>Contacto: {p.telecom[2].value}</p>\r\n              <div>\r\n                <button className=\"editButton\" onClick={() => handleEditClick(p)}>Editar</button>\r\n                <button className=\"deleteButton\" onClick={() => deletePaciente(p._id)}>Borrar</button>\r\n                <button className=\"historialButton\" onClick={() => historialPaciente(p)}>Ver historial médico</button>\r\n                <ListObservations pacienteId={p._id} />\r\n              </div>\r\n            </article>\r\n          ))\r\n\r\n\r\n        ) : (\r\n\r\n          <h2>No hay pacientes para mostrar</h2>\r\n        )}\r\n\r\n      </div >\r\n    )\r\n  )\r\n}\r\nexport default ListPatients;\r\n\r\n\r\n\r\n// CODIGO BUSCADOR SOLO\r\n/*\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { EditPaciente } from '../components/EditPaciente';\r\n\r\n\r\nexport const ListPatients = () => {\r\n  // const { pacientes, setPacientes } = props;\r\n\r\n  const [pacientes, setPacientes] = useState([]);\r\n  //const [showEditForm, setShowEditForm] = useState(false);\r\n  const [editedPaciente, setEditedPaciente] = useState(null);\r\n\r\n\r\n  //Para el buscador\r\n  const [filteredPacientes, setFilteredPacientes] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    async function getPacientes() {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n      setFilteredPacientes(pacientes); //pasamos todos los pacientes que hay\r\n    }\r\n    getPacientes();\r\n  }, []);\r\n\r\n  //filtrado para el buscador\r\n\r\n  const handleSearch = (e) => {\r\n    const value = e.target.value;\r\n    setSearchTerm(value);\r\n    const filteredResults = pacientes.filter(paciente =>\r\n      paciente.name.toLowerCase().includes(value.toLowerCase())\r\n\r\n    );\r\n    setFilteredPacientes(filteredResults);\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  const deletePaciente = async (pacienteId) => {\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n      method: \"DELETE\"\r\n    });\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n      setPacientes(currentPacientes => {\r\n        return currentPacientes.filter((currentPaciente) => currentPaciente._id !== pacienteId);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (paciente) => {\r\n    setEditedPaciente(paciente);\r\n  };\r\n\r\n  const handleCloseEdit = () => {\r\n    setEditedPaciente(null); // Restablecer editedPaciente a null para ocultar el componente EditPaciente\r\n  };\r\n\r\n  const updatePacienteList = async () => {\r\n    try {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n    } catch (error) {\r\n      console.error('Error al actualizar la lista de pacientes:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n       <div className='barra-buscador'>\r\n      <input className='buscador'\r\n        type=\"text\"\r\n        placeholder=\"Buscar por nombre\"\r\n        value={searchTerm}\r\n        onChange={handleSearch}\r\n      />\r\n      <img className=\"buscar\" src='/buscar.avif' />\r\n      </div>\r\n\r\n\r\n\r\n      {filteredPacientes.map(paciente => (\r\n        <article key={paciente._id} className=\"patient-item\">\r\n          <p className=\"active\">Estado activo:{paciente.active}</p>\r\n          <p className=\"name\">Nombre:{paciente.name}</p>\r\n          <p className=\"gender\">Género:{paciente.gender}</p>\r\n          <p className=\"birthDate\">Fecha de nacimiento:{paciente.birthDate}</p>\r\n          <div>\r\n            <button className=\"edit\" onClick={() => handleEditClick(paciente)}>Editar</button>\r\n            <button className=\"delete\" onClick={() => deletePaciente(paciente._id)}>Borrar</button>\r\n          </div>\r\n        </article>\r\n      ))}\r\n\r\n      {editedPaciente && (\r\n        <EditPaciente paciente={editedPaciente} onClose={handleCloseEdit} updatePacienteList={updatePacienteList} />\r\n      )}\r\n\r\n    </div>\r\n  );\r\n};\r\nexport default ListPatients;\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// CODIGO CON BUSCADOR Y FILTRADO\r\n/*\r\nimport React, { useEffect, useState } from 'react';\r\nimport { EditPaciente } from '../components/EditPaciente';\r\n\r\n\r\nexport const ListPatients = () => {\r\n  // const { pacientes, setPacientes } = props;\r\n\r\n  const [pacientes, setPacientes] = useState([]);\r\n  //const [showEditForm, setShowEditForm] = useState(false);\r\n  const [editedPaciente, setEditedPaciente] = useState(null);\r\n\r\n\r\n  //Para el buscador\r\n  const [filteredPacientes, setFilteredPacientes] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  //Para el filtrado\r\n  const [filterByActive, setFilterByActive] = useState('all'); // Opción predeterminada: mostrar todos los pacientes\r\n  const [filterByGender, setFilterByGender] = useState('all'); // Opción predeterminada: mostrar todos los pacientes\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n    async function getPacientes() {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n      setFilteredPacientes(pacientes); //pasamos todos los pacientes que hay\r\n    }\r\n    getPacientes();\r\n  }, []);\r\n\r\n\r\n \r\n  //filtrado + buscador (tambien se tiene que filtrar)\r\n  const handleSearch = (e) => {\r\n    const value = e.target.value;\r\n    setSearchTerm(value);\r\n    filterPacientes(value, filterByActive, filterByGender);\r\n  };\r\n\r\n  const handleFilterByActiveChange = (e) => {\r\n    const value = e.target.value;\r\n    setFilterByActive(value);\r\n    filterPacientes(searchTerm, value, filterByGender);\r\n  };\r\n\r\n  const handleFilterByGenderChange = (e) => {\r\n    const value = e.target.value;\r\n    setFilterByGender(value);\r\n    filterPacientes(searchTerm, filterByActive, value);\r\n  };\r\n\r\n  const filterPacientes = (searchTerm, activeOption, genderOption) => {\r\n    let filteredResults = pacientes.filter(paciente =>\r\n      (paciente.name.toLowerCase().includes(searchTerm.toLowerCase()) || searchTerm === '') &&\r\n      (activeOption === 'all' || paciente.active === activeOption) &&\r\n      (genderOption === 'all' || paciente.gender === genderOption)\r\n    );\r\n    setFilteredPacientes(filteredResults);\r\n  };\r\n\r\n\r\n\r\n  const deletePaciente = async (pacienteId) => {\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n      method: \"DELETE\"\r\n    });\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n      setPacientes(currentPacientes => {\r\n        return currentPacientes.filter((currentPaciente) => currentPaciente._id !== pacienteId);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (paciente) => {\r\n    setEditedPaciente(paciente);\r\n  };\r\n\r\n  const handleCloseEdit = () => {\r\n    setEditedPaciente(null); // Restablecer editedPaciente a null para ocultar el componente EditPaciente\r\n  };\r\n\r\n  const updatePacienteList = async () => {\r\n    try {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n    } catch (error) {\r\n      console.error('Error al actualizar la lista de pacientes:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n       <div className='barra-buscador'>\r\n      <input className='buscador'\r\n        type=\"text\"\r\n        placeholder=\"Buscar por nombre\"\r\n        value={searchTerm}\r\n        onChange={handleSearch}\r\n      />\r\n      <img className=\"buscar\" src='/buscar.avif' />\r\n      </div>\r\n     \r\n      <div className='filtrado'>\r\n        <select value={filterByActive} onChange={handleFilterByActiveChange} name='ESTADO'>\r\n          <option value=\"all\">ESTADO</option>\r\n          <option value=\"true\">True</option>\r\n          <option value=\"false\">False</option>\r\n          <option value=\"all\">Todos</option>\r\n        </select>\r\n        \r\n        <select value={filterByGender} onChange={handleFilterByGenderChange}>\r\n          <option value=\"all\">GÉNERO</option>\r\n          <option value=\"male\">Masculino</option>\r\n          <option value=\"female\">Femenino</option>\r\n          <option value=\"all\">Todos</option>\r\n          <option value=\"other\">Otro</option>\r\n        </select>\r\n      </div>\r\n  \r\n  \r\n      {filteredPacientes.map(paciente => (\r\n        <article key={paciente._id} className=\"patient-item\">\r\n          <p className=\"active\">Estado activo:{paciente.active}</p>\r\n          <p className=\"name\">Nombre:{paciente.name}</p>\r\n          <p className=\"gender\">Género:{paciente.gender}</p>\r\n          <p className=\"birthDate\">Fecha de nacimiento:{paciente.birthDate}</p>\r\n          <div>\r\n            <button className=\"edit\" onClick={() => handleEditClick(paciente)}>Editar</button>\r\n            <button className=\"delete\" onClick={() => deletePaciente(paciente._id)}>Borrar</button>\r\n          </div>\r\n        </article>\r\n      ))}\r\n\r\n      {editedPaciente && (\r\n        <EditPaciente paciente={editedPaciente} onClose={handleCloseEdit} updatePacienteList={updatePacienteList} />\r\n      )}\r\n      \r\n    </div>\r\n  );\r\n};\r\nexport default ListPatients;\r\n\r\n*/\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}