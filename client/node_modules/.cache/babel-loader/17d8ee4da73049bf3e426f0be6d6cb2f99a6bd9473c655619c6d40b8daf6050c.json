{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blanc\\\\OneDrive - UNIVERSIDAD DE SEVILLA\\\\Escritorio\\\\4 ING SALUD\\\\Trabajo Fin de Grado\\\\intento\\\\client\\\\src\\\\components\\\\ListPatients.js\",\n  _s = $RefreshSig$();\n/*\r\nimport React from 'react'\r\nimport { useEffect, useState } from 'react'\r\n//import { MongoClient } from 'mongodb'\r\n\r\nexport const ListPatients = (props) =>  {\r\n  const { paciente, setPacientes } = props;\r\n\r\n  //Creamos un estado para poder listar todas los pacientes que tenga el array del localstorage\r\n  //este estado inicialmente estara vacio por eso se ponen corchetes vacios\r\n  const [listadoState, setListadoState] = useState([]);\r\n /*\r\n   //vamos a usar el hook use effect pq es lo que se va a ejecutar nada mas cargar el componente\r\n  //Por eso la lista vacia como segundo componente\r\n  useEffect(() => {\r\n    getPatient();\r\n  }, []);\r\n\r\n  const getPatient = () => {\r\n    //el objeto que recogemos lo pasamos a un objeto usable, por eso hacemos JSON.parse\r\n    let patients = JSON.parse(localStorage.getItem(\"patients\")); //FETCH\r\n    //guardamos los pacientes sacados del array del localstorage en el estado\r\n    setListadoState(patients);\r\n  }\r\n*/\n/*\r\n  const updatePaciente = async (pacienteId, pacienteStatus) => {\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({ status: pacienteStatus }),\r\n        headers: {\r\n            \"Content-Type\": \"applicacion/json\"\r\n        },\r\n\r\n    });\r\n*/\n/*\r\n    //Creo que este codigo es para el caso del video\r\n    //hay un checkbox al lado de cada paciente para hacer tick o quitarlo\r\n    //cambia la propiedad status de true a false\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n        setPacientes(currentPacientes => {\r\n            return currentPacientes.map((currentPaciente) => {\r\n                if (currentPaciente._id === pacienteId) {\r\n                    return { ...currentPaciente, status: !currentPaciente.status }\r\n                }\r\n                return currentPaciente;\r\n            })\r\n\r\n        })\r\n    }\r\n  \r\n};\r\n\r\n*/\n/*\r\n  const deletePaciente = async (pacienteId) => {\r\n    const res = await fetch(`api/pacientes/${pacienteId}`, {\r\n        method: \"DELETE\"\r\n    });\r\n    const json = await res.json();\r\n    if(json.acknowledged){\r\n        setPacientes(currentPacientes => {\r\n            return currentPacientes\r\n            .filter((currentPaciente) => (currentPaciente._id !== pacienteId));\r\n        })\r\n    }\r\n}\r\n\r\n \r\n    \r\n  return (\r\n\r\n    \r\n    <>\r\n    \r\n    \r\n     {paciente != null ?\r\n            paciente.map(p => {\r\n              return(\r\n                <article key={paciente._id} className=\"patient-item\">\r\n                      <p className=\"active\">{paciente.active}</p>\r\n                      <p className=\"name\">{paciente.name}</p>\r\n                      <p className=\"gender\">{paciente.gender}</p>\r\n                      <p className=\"birthDate\">{paciente.birthDate}</p>\r\n\r\n                      <button className=\"edit\">Editar</button>\r\n                      <button className=\"delete\" onClick={() => deletePaciente(paciente._id)}>Borrar</button>\r\n                  </article>\r\n\r\n              );\r\n            })\r\n        : <h2>No hay pacientes para mostrar</h2>\r\n    } \r\n    </>\r\n  )\r\n\r\n\r\n\r\n}*/\n\n///////////////////////////////////////////////////////////////\n//CODIGO CHATGPT\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListPatients = () => {\n  _s();\n  // const { pacientes, setPacientes } = props;\n\n  const [pacientes, setPacientes] = useState([]);\n  const [showEditForm, setShowEditForm] = useState(false);\n  const [editedPaciente, setEditedPaciente] = useState({});\n  const [content, setContent] = useState(\"\");\n  useEffect(() => {\n    async function getPacientes() {\n      const res = await fetch(\"/api/pacientes\");\n      const pacientes = await res.json();\n      setPacientes(pacientes);\n    }\n    getPacientes();\n  }, []);\n  const deletePaciente = async pacienteId => {\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\n      method: \"DELETE\"\n    });\n    const json = await res.json();\n    if (json.acknowledged) {\n      setPacientes(currentPacientes => {\n        return currentPacientes.filter(currentPaciente => currentPaciente._id !== pacienteId);\n      });\n    }\n  };\n  const updatePaciente = async pacienteId => {\n    try {\n      const res = await fetch(`/api/pacientes/${pacienteId}`, {\n        method: \"PUT\",\n        body: JSON.stringify(editedPaciente),\n        headers: {\n          \"Content-Type\": \"applicacion/json\"\n        }\n      });\n      const json = await res.json();\n      if (json.acknowledged) {\n        setPacientes(currentPacientes => {\n          return currentPacientes.map(currentPaciente => {\n            if (currentPaciente._id === pacienteId) {\n              return {\n                ...currentPaciente,\n                ...editedPaciente\n              };\n            }\n            return currentPaciente;\n          });\n        });\n        setShowEditForm(false);\n      }\n    } catch (error) {\n      console.log(\"Error al actualizar el paciente:\", error);\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setEditedPaciente({\n      ...editedPaciente,\n      [name]: value\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log(\"p=\", pacientes), pacientes && pacientes.length > 0 ? pacientes.map(p => {\n      return /*#__PURE__*/_jsxDEV(\"article\", {\n        className: \"patient-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"active\",\n          children: [\"Estado activo:\", p.active]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"name\",\n          children: [\"Nombre:\", p.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"gender\",\n          children: [\"G\\xE9nero:\", p.gender]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"birthDate\",\n          children: [\"Fecha de nacimiento:\", p.birthDate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 15\n        }, this), showEditForm ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"active\",\n            value: editedPaciente.active,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"name\",\n            value: editedPaciente.name,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"gender\",\n            value: editedPaciente.gender,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"birthDate\",\n            value: editedPaciente.birthDate,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => updatePaciente(p._id),\n            children: \"Guardar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"edit\",\n            onClick: () => {\n              setShowEditForm(true);\n              setEditedPaciente(p); // Inicializa el formulario con los datos del paciente\n            },\n            children: \"Editar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"delete\",\n            onClick: () => deletePaciente(p._id),\n            children: \"Borrar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 33\n        }, this)]\n      }, p._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"No hay pacientes para mostrar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\n/*\r\n          );\r\n        }) :\r\n        <h2>No hay pacientes para mostrar</h2>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n*/\n_s(ListPatients, \"WXH5vKFbDC3gdK1yM1Oc/YCQM/0=\");\n_c = ListPatients;\nvar _c;\n$RefreshReg$(_c, \"ListPatients\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ListPatients","_s","pacientes","setPacientes","showEditForm","setShowEditForm","editedPaciente","setEditedPaciente","content","setContent","getPacientes","res","fetch","json","deletePaciente","pacienteId","method","acknowledged","currentPacientes","filter","currentPaciente","_id","updatePaciente","body","JSON","stringify","headers","map","error","console","log","handleInputChange","e","name","value","target","children","length","p","className","active","fileName","_jsxFileName","lineNumber","columnNumber","gender","birthDate","type","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/blanc/OneDrive - UNIVERSIDAD DE SEVILLA/Escritorio/4 ING SALUD/Trabajo Fin de Grado/intento/client/src/components/ListPatients.js"],"sourcesContent":["/*\r\nimport React from 'react'\r\nimport { useEffect, useState } from 'react'\r\n//import { MongoClient } from 'mongodb'\r\n\r\nexport const ListPatients = (props) =>  {\r\n  const { paciente, setPacientes } = props;\r\n\r\n  //Creamos un estado para poder listar todas los pacientes que tenga el array del localstorage\r\n  //este estado inicialmente estara vacio por eso se ponen corchetes vacios\r\n  const [listadoState, setListadoState] = useState([]);\r\n /*\r\n   //vamos a usar el hook use effect pq es lo que se va a ejecutar nada mas cargar el componente\r\n  //Por eso la lista vacia como segundo componente\r\n  useEffect(() => {\r\n    getPatient();\r\n  }, []);\r\n\r\n  const getPatient = () => {\r\n    //el objeto que recogemos lo pasamos a un objeto usable, por eso hacemos JSON.parse\r\n    let patients = JSON.parse(localStorage.getItem(\"patients\")); //FETCH\r\n    //guardamos los pacientes sacados del array del localstorage en el estado\r\n    setListadoState(patients);\r\n  }\r\n*/\r\n/*\r\n  const updatePaciente = async (pacienteId, pacienteStatus) => {\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({ status: pacienteStatus }),\r\n        headers: {\r\n            \"Content-Type\": \"applicacion/json\"\r\n        },\r\n\r\n    });\r\n*/\r\n/*\r\n    //Creo que este codigo es para el caso del video\r\n    //hay un checkbox al lado de cada paciente para hacer tick o quitarlo\r\n    //cambia la propiedad status de true a false\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n        setPacientes(currentPacientes => {\r\n            return currentPacientes.map((currentPaciente) => {\r\n                if (currentPaciente._id === pacienteId) {\r\n                    return { ...currentPaciente, status: !currentPaciente.status }\r\n                }\r\n                return currentPaciente;\r\n            })\r\n\r\n        })\r\n    }\r\n  \r\n};\r\n\r\n*/\r\n/*\r\n  const deletePaciente = async (pacienteId) => {\r\n    const res = await fetch(`api/pacientes/${pacienteId}`, {\r\n        method: \"DELETE\"\r\n    });\r\n    const json = await res.json();\r\n    if(json.acknowledged){\r\n        setPacientes(currentPacientes => {\r\n            return currentPacientes\r\n            .filter((currentPaciente) => (currentPaciente._id !== pacienteId));\r\n        })\r\n    }\r\n}\r\n\r\n \r\n    \r\n  return (\r\n\r\n    \r\n    <>\r\n    \r\n    \r\n     {paciente != null ?\r\n            paciente.map(p => {\r\n              return(\r\n                <article key={paciente._id} className=\"patient-item\">\r\n                      <p className=\"active\">{paciente.active}</p>\r\n                      <p className=\"name\">{paciente.name}</p>\r\n                      <p className=\"gender\">{paciente.gender}</p>\r\n                      <p className=\"birthDate\">{paciente.birthDate}</p>\r\n\r\n                      <button className=\"edit\">Editar</button>\r\n                      <button className=\"delete\" onClick={() => deletePaciente(paciente._id)}>Borrar</button>\r\n                  </article>\r\n\r\n              );\r\n            })\r\n        : <h2>No hay pacientes para mostrar</h2>\r\n    } \r\n    </>\r\n  )\r\n\r\n\r\n\r\n}*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////\r\n//CODIGO CHATGPT\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nexport const ListPatients = () => {\r\n  // const { pacientes, setPacientes } = props;\r\n\r\n  const [pacientes, setPacientes] = useState([]);\r\n  const [showEditForm, setShowEditForm] = useState(false);\r\n  const [editedPaciente, setEditedPaciente] = useState({});\r\n  const [content, setContent] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function getPacientes() {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n    }\r\n    getPacientes();\r\n  }, []);\r\n\r\n  const deletePaciente = async (pacienteId) => {\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n      method: \"DELETE\"\r\n    });\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n      setPacientes(currentPacientes => {\r\n        return currentPacientes.filter((currentPaciente) => currentPaciente._id !== pacienteId);\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  const updatePaciente = async (pacienteId) => {\r\n\r\n    try {\r\n      const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify(editedPaciente),\r\n        headers: {\r\n          \"Content-Type\": \"applicacion/json\"\r\n        },\r\n\r\n      });\r\n\r\n      const json = await res.json();\r\n      if (json.acknowledged) {\r\n        setPacientes(currentPacientes => {\r\n          return currentPacientes.map((currentPaciente) => {\r\n            if (currentPaciente._id === pacienteId) {\r\n              return { ...currentPaciente, ...editedPaciente };\r\n            }\r\n            return currentPaciente;\r\n          });\r\n\r\n        });\r\n        setShowEditForm(false);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error al actualizar el paciente:\", error);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setEditedPaciente({ ...editedPaciente, [name]: value });\r\n};\r\n\r\n  return (\r\n    <div>\r\n      {console.log(\"p=\", pacientes)}\r\n      {pacientes && pacientes.length > 0 ?\r\n        pacientes.map(p => {\r\n          return (\r\n            <article key={p._id} className=\"patient-item\">\r\n              <p className=\"active\">Estado activo:{p.active}</p>\r\n              <p className=\"name\">Nombre:{p.name}</p>\r\n              <p className=\"gender\">Género:{p.gender}</p>\r\n              <p className=\"birthDate\">Fecha de nacimiento:{p.birthDate}</p>\r\n              {showEditForm ? (\r\n                  <div>\r\n                                    <input type=\"text\" name=\"active\" value={editedPaciente.active} onChange={handleInputChange} />\r\n                                    <input type=\"text\" name=\"name\" value={editedPaciente.name} onChange={handleInputChange} />\r\n                                    <input type=\"text\" name=\"gender\" value={editedPaciente.gender} onChange={handleInputChange} />\r\n                                    <input type=\"text\" name=\"birthDate\" value={editedPaciente.birthDate} onChange={handleInputChange} />\r\n                                    <button onClick={() => updatePaciente(p._id)}>Guardar</button>\r\n                                </div>\r\n                            ) : (\r\n                                <div>\r\n                                    <button className=\"edit\" onClick={() => {\r\n                                        setShowEditForm(true);\r\n                                        setEditedPaciente(p); // Inicializa el formulario con los datos del paciente\r\n                                    }}>Editar</button>\r\n                                    <button className=\"delete\" onClick={() => deletePaciente(p._id)}>Borrar</button>\r\n                                </div>\r\n                            )}\r\n                        </article>\r\n          );\r\n        }) :\r\n              \r\n        <h2>No hay pacientes para mostrar</h2>\r\n    }\r\n</div>\r\n);\r\n};\r\n/*\r\n          );\r\n        }) :\r\n        <h2>No hay pacientes para mostrar</h2>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n*/\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}