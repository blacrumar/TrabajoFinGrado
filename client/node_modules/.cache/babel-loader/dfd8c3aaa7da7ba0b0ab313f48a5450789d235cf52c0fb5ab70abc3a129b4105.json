{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blanc\\\\OneDrive - UNIVERSIDAD DE SEVILLA\\\\Escritorio\\\\4 ING SALUD\\\\Trabajo Fin de Grado\\\\intento\\\\client\\\\src\\\\components\\\\ListPatients.js\",\n  _s = $RefreshSig$();\n/*\r\nimport React from 'react'\r\nimport { useEffect, useState } from 'react'\r\n//import { MongoClient } from 'mongodb'\r\n\r\nexport const ListPatients = (props) =>  {\r\n  const { paciente, setPacientes } = props;\r\n\r\n  //Creamos un estado para poder listar todas los pacientes que tenga el array del localstorage\r\n  //este estado inicialmente estara vacio por eso se ponen corchetes vacios\r\n  const [listadoState, setListadoState] = useState([]);\r\n /*\r\n   //vamos a usar el hook use effect pq es lo que se va a ejecutar nada mas cargar el componente\r\n  //Por eso la lista vacia como segundo componente\r\n  useEffect(() => {\r\n    getPatient();\r\n  }, []);\r\n\r\n  const getPatient = () => {\r\n    //el objeto que recogemos lo pasamos a un objeto usable, por eso hacemos JSON.parse\r\n    let patients = JSON.parse(localStorage.getItem(\"patients\")); //FETCH\r\n    //guardamos los pacientes sacados del array del localstorage en el estado\r\n    setListadoState(patients);\r\n  }\r\n*/\n/*\r\n  const updatePaciente = async (pacienteId, pacienteStatus) => {\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({ status: pacienteStatus }),\r\n        headers: {\r\n            \"Content-Type\": \"applicacion/json\"\r\n        },\r\n\r\n    });\r\n*/\n/*\r\n    //Creo que este codigo es para el caso del video\r\n    //hay un checkbox al lado de cada paciente para hacer tick o quitarlo\r\n    //cambia la propiedad status de true a false\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n        setPacientes(currentPacientes => {\r\n            return currentPacientes.map((currentPaciente) => {\r\n                if (currentPaciente._id === pacienteId) {\r\n                    return { ...currentPaciente, status: !currentPaciente.status }\r\n                }\r\n                return currentPaciente;\r\n            })\r\n\r\n        })\r\n    }\r\n  \r\n};\r\n\r\n*/\n/*\r\n  const deletePaciente = async (pacienteId) => {\r\n    const res = await fetch(`api/pacientes/${pacienteId}`, {\r\n        method: \"DELETE\"\r\n    });\r\n    const json = await res.json();\r\n    if(json.acknowledged){\r\n        setPacientes(currentPacientes => {\r\n            return currentPacientes\r\n            .filter((currentPaciente) => (currentPaciente._id !== pacienteId));\r\n        })\r\n    }\r\n}\r\n\r\n \r\n    \r\n  return (\r\n\r\n    \r\n    <>\r\n    \r\n    \r\n     {paciente != null ?\r\n            paciente.map(p => {\r\n              return(\r\n                <article key={paciente._id} className=\"patient-item\">\r\n                      <p className=\"active\">{paciente.active}</p>\r\n                      <p className=\"name\">{paciente.name}</p>\r\n                      <p className=\"gender\">{paciente.gender}</p>\r\n                      <p className=\"birthDate\">{paciente.birthDate}</p>\r\n\r\n                      <button className=\"edit\">Editar</button>\r\n                      <button className=\"delete\" onClick={() => deletePaciente(paciente._id)}>Borrar</button>\r\n                  </article>\r\n\r\n              );\r\n            })\r\n        : <h2>No hay pacientes para mostrar</h2>\r\n    } \r\n    </>\r\n  )\r\n\r\n\r\n\r\n}*/\n\n///////////////////////////////////////////////////////////////\n\nimport React, { useEffect, useState } from 'react';\nimport { EditPaciente } from '../components/EditPaciente';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ListPatients = () => {\n  _s();\n  // const { pacientes, setPacientes } = props;\n\n  const [pacientes, setPacientes] = useState([]);\n  //const [showEditForm, setShowEditForm] = useState(false);\n  const [editedPaciente, setEditedPaciente] = useState(null);\n  useEffect(() => {\n    async function getPacientes() {\n      const res = await fetch(\"/api/pacientes\");\n      const pacientes = await res.json();\n      setPacientes(pacientes);\n    }\n    getPacientes();\n  }, []);\n  const deletePaciente = async pacienteId => {\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\n      method: \"DELETE\"\n    });\n    const json = await res.json();\n    if (json.acknowledged) {\n      setPacientes(currentPacientes => {\n        return currentPacientes.filter(currentPaciente => currentPaciente._id !== pacienteId);\n      });\n    }\n  };\n  const handleEditClick = paciente => {\n    setEditedPaciente(paciente);\n  };\n  const handleCloseEdit = () => {\n    setEditedPaciente(null); // Restablecer editedPaciente a null para ocultar el componente EditPaciente\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // Tu código para guardar cambios en la base de datos\n\n      // Después de guardar los cambios, recargar la lista de pacientes\n      await getPacientes();\n      onClose(); // Cierra el formulario después de guardar los cambios\n    } catch (error) {\n      console.error('Error al guardar cambios:', error);\n      // Manejo de errores\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: editedPaciente ? /*#__PURE__*/_jsxDEV(EditPaciente, {\n      paciente: editedPaciente,\n      onClose: handleCloseEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: pacientes && pacientes.length > 0 ? pacientes.map(p => /*#__PURE__*/_jsxDEV(\"article\", {\n        className: \"patient-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"active\",\n          children: [\"Estado activo:\", p.active]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"name\",\n          children: [\"Nombre:\", p.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"gender\",\n          children: [\"G\\xE9nero:\", p.gender]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"birthDate\",\n          children: [\"Fecha de nacimiento:\", p.birthDate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"edit\",\n            onClick: () => handleEditClick(p),\n            children: \"Editar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"delete\",\n            onClick: () => deletePaciente(p._id),\n            children: \"Borrar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 17\n        }, this)]\n      }, p._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 15\n      }, this)) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No hay pacientes para mostrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_s(ListPatients, \"jkcc8rwt+86O2n9hhUuS0gmwvGM=\");\n_c = ListPatients;\nexport default ListPatients;\nvar _c;\n$RefreshReg$(_c, \"ListPatients\");","map":{"version":3,"names":["React","useEffect","useState","EditPaciente","jsxDEV","_jsxDEV","ListPatients","_s","pacientes","setPacientes","editedPaciente","setEditedPaciente","getPacientes","res","fetch","json","deletePaciente","pacienteId","method","acknowledged","currentPacientes","filter","currentPaciente","_id","handleEditClick","paciente","handleCloseEdit","handleSubmit","e","preventDefault","onClose","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","p","className","active","name","gender","birthDate","onClick","_c","$RefreshReg$"],"sources":["C:/Users/blanc/OneDrive - UNIVERSIDAD DE SEVILLA/Escritorio/4 ING SALUD/Trabajo Fin de Grado/intento/client/src/components/ListPatients.js"],"sourcesContent":["/*\r\nimport React from 'react'\r\nimport { useEffect, useState } from 'react'\r\n//import { MongoClient } from 'mongodb'\r\n\r\nexport const ListPatients = (props) =>  {\r\n  const { paciente, setPacientes } = props;\r\n\r\n  //Creamos un estado para poder listar todas los pacientes que tenga el array del localstorage\r\n  //este estado inicialmente estara vacio por eso se ponen corchetes vacios\r\n  const [listadoState, setListadoState] = useState([]);\r\n /*\r\n   //vamos a usar el hook use effect pq es lo que se va a ejecutar nada mas cargar el componente\r\n  //Por eso la lista vacia como segundo componente\r\n  useEffect(() => {\r\n    getPatient();\r\n  }, []);\r\n\r\n  const getPatient = () => {\r\n    //el objeto que recogemos lo pasamos a un objeto usable, por eso hacemos JSON.parse\r\n    let patients = JSON.parse(localStorage.getItem(\"patients\")); //FETCH\r\n    //guardamos los pacientes sacados del array del localstorage en el estado\r\n    setListadoState(patients);\r\n  }\r\n*/\r\n/*\r\n  const updatePaciente = async (pacienteId, pacienteStatus) => {\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({ status: pacienteStatus }),\r\n        headers: {\r\n            \"Content-Type\": \"applicacion/json\"\r\n        },\r\n\r\n    });\r\n*/\r\n/*\r\n    //Creo que este codigo es para el caso del video\r\n    //hay un checkbox al lado de cada paciente para hacer tick o quitarlo\r\n    //cambia la propiedad status de true a false\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n        setPacientes(currentPacientes => {\r\n            return currentPacientes.map((currentPaciente) => {\r\n                if (currentPaciente._id === pacienteId) {\r\n                    return { ...currentPaciente, status: !currentPaciente.status }\r\n                }\r\n                return currentPaciente;\r\n            })\r\n\r\n        })\r\n    }\r\n  \r\n};\r\n\r\n*/\r\n/*\r\n  const deletePaciente = async (pacienteId) => {\r\n    const res = await fetch(`api/pacientes/${pacienteId}`, {\r\n        method: \"DELETE\"\r\n    });\r\n    const json = await res.json();\r\n    if(json.acknowledged){\r\n        setPacientes(currentPacientes => {\r\n            return currentPacientes\r\n            .filter((currentPaciente) => (currentPaciente._id !== pacienteId));\r\n        })\r\n    }\r\n}\r\n\r\n \r\n    \r\n  return (\r\n\r\n    \r\n    <>\r\n    \r\n    \r\n     {paciente != null ?\r\n            paciente.map(p => {\r\n              return(\r\n                <article key={paciente._id} className=\"patient-item\">\r\n                      <p className=\"active\">{paciente.active}</p>\r\n                      <p className=\"name\">{paciente.name}</p>\r\n                      <p className=\"gender\">{paciente.gender}</p>\r\n                      <p className=\"birthDate\">{paciente.birthDate}</p>\r\n\r\n                      <button className=\"edit\">Editar</button>\r\n                      <button className=\"delete\" onClick={() => deletePaciente(paciente._id)}>Borrar</button>\r\n                  </article>\r\n\r\n              );\r\n            })\r\n        : <h2>No hay pacientes para mostrar</h2>\r\n    } \r\n    </>\r\n  )\r\n\r\n\r\n\r\n}*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { EditPaciente } from '../components/EditPaciente';\r\n\r\n\r\nexport const ListPatients = () => {\r\n  // const { pacientes, setPacientes } = props;\r\n\r\n  const [pacientes, setPacientes] = useState([]);\r\n  //const [showEditForm, setShowEditForm] = useState(false);\r\n  const [editedPaciente, setEditedPaciente] = useState(null);\r\n\r\n\r\n  useEffect(() => {\r\n    async function getPacientes() {\r\n      const res = await fetch(\"/api/pacientes\");\r\n      const pacientes = await res.json();\r\n      setPacientes(pacientes);\r\n    }\r\n    getPacientes();\r\n  }, []);\r\n\r\n  const deletePaciente = async (pacienteId) => {\r\n    const res = await fetch(`/api/pacientes/${pacienteId}`, {\r\n      method: \"DELETE\"\r\n    });\r\n    const json = await res.json();\r\n    if (json.acknowledged) {\r\n      setPacientes(currentPacientes => {\r\n        return currentPacientes.filter((currentPaciente) => currentPaciente._id !== pacienteId);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleEditClick = (paciente) => {\r\n    setEditedPaciente(paciente);\r\n  };\r\n\r\n  const handleCloseEdit = () => {\r\n    setEditedPaciente(null); // Restablecer editedPaciente a null para ocultar el componente EditPaciente\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n        // Tu código para guardar cambios en la base de datos\r\n\r\n        // Después de guardar los cambios, recargar la lista de pacientes\r\n        await getPacientes();\r\n        onClose(); // Cierra el formulario después de guardar los cambios\r\n    } catch (error) {\r\n        console.error('Error al guardar cambios:', error);\r\n        // Manejo de errores\r\n    }\r\n};\r\n\r\n  return (\r\n    <div>\r\n      {editedPaciente ? (\r\n        <EditPaciente paciente={editedPaciente} onClose={handleCloseEdit} />\r\n      ) : (\r\n        <div>\r\n          {pacientes && pacientes.length > 0 ? (\r\n            pacientes.map(p => (\r\n\r\n              <article key={p._id} className=\"patient-item\">\r\n                <p className=\"active\">Estado activo:{p.active}</p>\r\n                <p className=\"name\">Nombre:{p.name}</p>\r\n                <p className=\"gender\">Género:{p.gender}</p>\r\n                <p className=\"birthDate\">Fecha de nacimiento:{p.birthDate}</p>\r\n                <div>\r\n                  <button className=\"edit\" onClick={() => handleEditClick(p)}>Editar</button>\r\n                  <button className=\"delete\" onClick={() => deletePaciente(p._id)}>Borrar</button>\r\n                </div>\r\n              </article>\r\n          ))\r\n        \r\n\r\n        ) : (\r\n\r\n          <h2>No hay pacientes para mostrar</h2>\r\n        )}\r\n\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default ListPatients;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}